-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myFuncAccel is
port (
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    dim : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data0_req_din : OUT STD_LOGIC;
    data0_req_full_n : IN STD_LOGIC;
    data0_req_write : OUT STD_LOGIC;
    data0_rsp_empty_n : IN STD_LOGIC;
    data0_rsp_read : OUT STD_LOGIC;
    data0_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data0_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data0_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_start : IN STD_LOGIC;
    data1_req_din : OUT STD_LOGIC;
    data1_req_full_n : IN STD_LOGIC;
    data1_req_write : OUT STD_LOGIC;
    data1_rsp_empty_n : IN STD_LOGIC;
    data1_rsp_read : OUT STD_LOGIC;
    data1_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data1_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_req_din : OUT STD_LOGIC;
    data2_req_full_n : IN STD_LOGIC;
    data2_req_write : OUT STD_LOGIC;
    data2_rsp_empty_n : IN STD_LOGIC;
    data2_rsp_read : OUT STD_LOGIC;
    data2_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data2_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of myFuncAccel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myFuncAccel,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=4051,HLS_SYN_TPT=4034,HLS_SYN_MEM=0,HLS_SYN_DSP=23,HLS_SYN_FF=5087,HLS_SYN_LUT=5966,HLS_VERSION=2018_3}";
    constant data0_BASE_ADDRESS : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant data1_BASE_ADDRESS : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant data2_BASE_ADDRESS : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal Block_codeRepl50_pro_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_data0_req_din : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_data0_req_write : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_data0_rsp_read : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_data0_address : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_data0_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_data0_size : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl50_pro_U0_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_data0_load_15_loc_ch : STD_LOGIC;
    signal data0_load_15_loc_ch_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_15_loc_ch : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_15_loc_ch : STD_LOGIC;
    signal ap_channel_done_data0_load_14_loc_ch : STD_LOGIC;
    signal data0_load_14_loc_ch_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_14_loc_ch : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_14_loc_ch : STD_LOGIC;
    signal ap_channel_done_data0_load_13_loc_ch : STD_LOGIC;
    signal data0_load_13_loc_ch_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_13_loc_ch : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_13_loc_ch : STD_LOGIC;
    signal ap_channel_done_data0_load_12_loc_ch : STD_LOGIC;
    signal data0_load_12_loc_ch_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_12_loc_ch : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_12_loc_ch : STD_LOGIC;
    signal ap_channel_done_data0_load_11_loc_ch : STD_LOGIC;
    signal data0_load_11_loc_ch_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_11_loc_ch : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_11_loc_ch : STD_LOGIC;
    signal ap_channel_done_data0_load_10_loc_ch : STD_LOGIC;
    signal data0_load_10_loc_ch_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_10_loc_ch : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_10_loc_ch : STD_LOGIC;
    signal ap_channel_done_data0_load_9_loc_cha : STD_LOGIC;
    signal data0_load_9_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_9_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_9_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_8_loc_cha : STD_LOGIC;
    signal data0_load_8_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_8_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_8_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_7_loc_cha : STD_LOGIC;
    signal data0_load_7_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_7_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_7_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_6_loc_cha : STD_LOGIC;
    signal data0_load_6_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_6_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_6_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_5_loc_cha : STD_LOGIC;
    signal data0_load_5_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_5_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_5_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_4_loc_cha : STD_LOGIC;
    signal data0_load_4_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_4_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_4_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_3_loc_cha : STD_LOGIC;
    signal data0_load_3_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_3_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_3_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_2_loc_cha : STD_LOGIC;
    signal data0_load_2_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_2_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_2_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_1_loc_cha : STD_LOGIC;
    signal data0_load_1_loc_cha_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_1_loc_cha : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_1_loc_cha : STD_LOGIC;
    signal ap_channel_done_data0_load_loc_chann : STD_LOGIC;
    signal data0_load_loc_chann_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data0_load_loc_chann : STD_LOGIC := '0';
    signal ap_sync_channel_write_data0_load_loc_chann : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_ap_start : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_ap_done : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_data1_req_din : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_data1_req_write : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_data1_rsp_read : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_data1_address : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_sizeLoop_proc_U0_data1_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_sizeLoop_proc_U0_data1_size : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_sizeLoop_proc_U0_data2_req_din : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_data2_req_write : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_data2_rsp_read : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_data2_address : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_sizeLoop_proc_U0_data2_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_sizeLoop_proc_U0_data2_size : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal data0_load_loc_chann_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_loc_chann_empty_n : STD_LOGIC;
    signal data0_load_1_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_1_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_2_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_2_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_3_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_3_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_4_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_4_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_5_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_5_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_6_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_6_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_7_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_7_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_8_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_8_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_9_loc_cha_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_9_loc_cha_empty_n : STD_LOGIC;
    signal data0_load_10_loc_ch_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_10_loc_ch_empty_n : STD_LOGIC;
    signal data0_load_11_loc_ch_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_11_loc_ch_empty_n : STD_LOGIC;
    signal data0_load_12_loc_ch_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_12_loc_ch_empty_n : STD_LOGIC;
    signal data0_load_13_loc_ch_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_13_loc_ch_empty_n : STD_LOGIC;
    signal data0_load_14_loc_ch_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_14_loc_ch_empty_n : STD_LOGIC;
    signal data0_load_15_loc_ch_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_load_15_loc_ch_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_codeRepl50_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_codeRepl50_pro_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_sizeLoop_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_sizeLoop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_codeRepl50_pro_U0_start_full_n : STD_LOGIC;
    signal Block_codeRepl50_pro_U0_start_write : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_sizeLoop_proc_U0_start_write : STD_LOGIC;

    component Block_codeRepl50_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data0_req_din : OUT STD_LOGIC;
        data0_req_full_n : IN STD_LOGIC;
        data0_req_write : OUT STD_LOGIC;
        data0_rsp_empty_n : IN STD_LOGIC;
        data0_rsp_read : OUT STD_LOGIC;
        data0_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        data0_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        data0_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        data0_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_sizeLoop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data1_req_din : OUT STD_LOGIC;
        data1_req_full_n : IN STD_LOGIC;
        data1_req_write : OUT STD_LOGIC;
        data1_rsp_empty_n : IN STD_LOGIC;
        data1_rsp_read : OUT STD_LOGIC;
        data1_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        data1_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        data1_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        data1_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
        data2_req_din : OUT STD_LOGIC;
        data2_req_full_n : IN STD_LOGIC;
        data2_req_write : OUT STD_LOGIC;
        data2_rsp_empty_n : IN STD_LOGIC;
        data2_rsp_read : OUT STD_LOGIC;
        data2_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        data2_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        data2_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        data2_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_codeRepl50_pro_U0 : component Block_codeRepl50_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_codeRepl50_pro_U0_ap_start,
        ap_done => Block_codeRepl50_pro_U0_ap_done,
        ap_continue => Block_codeRepl50_pro_U0_ap_continue,
        ap_idle => Block_codeRepl50_pro_U0_ap_idle,
        ap_ready => Block_codeRepl50_pro_U0_ap_ready,
        data0_req_din => Block_codeRepl50_pro_U0_data0_req_din,
        data0_req_full_n => data0_req_full_n,
        data0_req_write => Block_codeRepl50_pro_U0_data0_req_write,
        data0_rsp_empty_n => data0_rsp_empty_n,
        data0_rsp_read => Block_codeRepl50_pro_U0_data0_rsp_read,
        data0_address => Block_codeRepl50_pro_U0_data0_address,
        data0_datain => data0_datain,
        data0_dataout => Block_codeRepl50_pro_U0_data0_dataout,
        data0_size => Block_codeRepl50_pro_U0_data0_size,
        ap_return_0 => Block_codeRepl50_pro_U0_ap_return_0,
        ap_return_1 => Block_codeRepl50_pro_U0_ap_return_1,
        ap_return_2 => Block_codeRepl50_pro_U0_ap_return_2,
        ap_return_3 => Block_codeRepl50_pro_U0_ap_return_3,
        ap_return_4 => Block_codeRepl50_pro_U0_ap_return_4,
        ap_return_5 => Block_codeRepl50_pro_U0_ap_return_5,
        ap_return_6 => Block_codeRepl50_pro_U0_ap_return_6,
        ap_return_7 => Block_codeRepl50_pro_U0_ap_return_7,
        ap_return_8 => Block_codeRepl50_pro_U0_ap_return_8,
        ap_return_9 => Block_codeRepl50_pro_U0_ap_return_9,
        ap_return_10 => Block_codeRepl50_pro_U0_ap_return_10,
        ap_return_11 => Block_codeRepl50_pro_U0_ap_return_11,
        ap_return_12 => Block_codeRepl50_pro_U0_ap_return_12,
        ap_return_13 => Block_codeRepl50_pro_U0_ap_return_13,
        ap_return_14 => Block_codeRepl50_pro_U0_ap_return_14,
        ap_return_15 => Block_codeRepl50_pro_U0_ap_return_15);

    Loop_sizeLoop_proc_U0 : component Loop_sizeLoop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_sizeLoop_proc_U0_ap_start,
        ap_done => Loop_sizeLoop_proc_U0_ap_done,
        ap_continue => Loop_sizeLoop_proc_U0_ap_continue,
        ap_idle => Loop_sizeLoop_proc_U0_ap_idle,
        ap_ready => Loop_sizeLoop_proc_U0_ap_ready,
        data1_req_din => Loop_sizeLoop_proc_U0_data1_req_din,
        data1_req_full_n => data1_req_full_n,
        data1_req_write => Loop_sizeLoop_proc_U0_data1_req_write,
        data1_rsp_empty_n => data1_rsp_empty_n,
        data1_rsp_read => Loop_sizeLoop_proc_U0_data1_rsp_read,
        data1_address => Loop_sizeLoop_proc_U0_data1_address,
        data1_datain => data1_datain,
        data1_dataout => Loop_sizeLoop_proc_U0_data1_dataout,
        data1_size => Loop_sizeLoop_proc_U0_data1_size,
        p_read => data0_load_loc_chann_dout,
        p_read1 => data0_load_1_loc_cha_dout,
        p_read2 => data0_load_2_loc_cha_dout,
        p_read3 => data0_load_3_loc_cha_dout,
        p_read4 => data0_load_4_loc_cha_dout,
        p_read5 => data0_load_5_loc_cha_dout,
        p_read6 => data0_load_6_loc_cha_dout,
        p_read7 => data0_load_7_loc_cha_dout,
        p_read8 => data0_load_8_loc_cha_dout,
        p_read9 => data0_load_9_loc_cha_dout,
        p_read10 => data0_load_10_loc_ch_dout,
        p_read11 => data0_load_11_loc_ch_dout,
        p_read12 => data0_load_12_loc_ch_dout,
        p_read13 => data0_load_13_loc_ch_dout,
        p_read14 => data0_load_14_loc_ch_dout,
        p_read15 => data0_load_15_loc_ch_dout,
        data2_req_din => Loop_sizeLoop_proc_U0_data2_req_din,
        data2_req_full_n => data2_req_full_n,
        data2_req_write => Loop_sizeLoop_proc_U0_data2_req_write,
        data2_rsp_empty_n => data2_rsp_empty_n,
        data2_rsp_read => Loop_sizeLoop_proc_U0_data2_rsp_read,
        data2_address => Loop_sizeLoop_proc_U0_data2_address,
        data2_datain => data2_datain,
        data2_dataout => Loop_sizeLoop_proc_U0_data2_dataout,
        data2_size => Loop_sizeLoop_proc_U0_data2_size);

    data0_load_loc_chann_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_0,
        if_full_n => data0_load_loc_chann_full_n,
        if_write => ap_channel_done_data0_load_loc_chann,
        if_dout => data0_load_loc_chann_dout,
        if_empty_n => data0_load_loc_chann_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_1_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_1,
        if_full_n => data0_load_1_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_1_loc_cha,
        if_dout => data0_load_1_loc_cha_dout,
        if_empty_n => data0_load_1_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_2_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_2,
        if_full_n => data0_load_2_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_2_loc_cha,
        if_dout => data0_load_2_loc_cha_dout,
        if_empty_n => data0_load_2_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_3_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_3,
        if_full_n => data0_load_3_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_3_loc_cha,
        if_dout => data0_load_3_loc_cha_dout,
        if_empty_n => data0_load_3_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_4_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_4,
        if_full_n => data0_load_4_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_4_loc_cha,
        if_dout => data0_load_4_loc_cha_dout,
        if_empty_n => data0_load_4_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_5_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_5,
        if_full_n => data0_load_5_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_5_loc_cha,
        if_dout => data0_load_5_loc_cha_dout,
        if_empty_n => data0_load_5_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_6_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_6,
        if_full_n => data0_load_6_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_6_loc_cha,
        if_dout => data0_load_6_loc_cha_dout,
        if_empty_n => data0_load_6_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_7_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_7,
        if_full_n => data0_load_7_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_7_loc_cha,
        if_dout => data0_load_7_loc_cha_dout,
        if_empty_n => data0_load_7_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_8_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_8,
        if_full_n => data0_load_8_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_8_loc_cha,
        if_dout => data0_load_8_loc_cha_dout,
        if_empty_n => data0_load_8_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_9_loc_cha_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_9,
        if_full_n => data0_load_9_loc_cha_full_n,
        if_write => ap_channel_done_data0_load_9_loc_cha,
        if_dout => data0_load_9_loc_cha_dout,
        if_empty_n => data0_load_9_loc_cha_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_10_loc_ch_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_10,
        if_full_n => data0_load_10_loc_ch_full_n,
        if_write => ap_channel_done_data0_load_10_loc_ch,
        if_dout => data0_load_10_loc_ch_dout,
        if_empty_n => data0_load_10_loc_ch_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_11_loc_ch_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_11,
        if_full_n => data0_load_11_loc_ch_full_n,
        if_write => ap_channel_done_data0_load_11_loc_ch,
        if_dout => data0_load_11_loc_ch_dout,
        if_empty_n => data0_load_11_loc_ch_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_12_loc_ch_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_12,
        if_full_n => data0_load_12_loc_ch_full_n,
        if_write => ap_channel_done_data0_load_12_loc_ch,
        if_dout => data0_load_12_loc_ch_dout,
        if_empty_n => data0_load_12_loc_ch_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_13_loc_ch_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_13,
        if_full_n => data0_load_13_loc_ch_full_n,
        if_write => ap_channel_done_data0_load_13_loc_ch,
        if_dout => data0_load_13_loc_ch_dout,
        if_empty_n => data0_load_13_loc_ch_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_14_loc_ch_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_14,
        if_full_n => data0_load_14_loc_ch_full_n,
        if_write => ap_channel_done_data0_load_14_loc_ch,
        if_dout => data0_load_14_loc_ch_dout,
        if_empty_n => data0_load_14_loc_ch_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);

    data0_load_15_loc_ch_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl50_pro_U0_ap_return_15,
        if_full_n => data0_load_15_loc_ch_full_n,
        if_write => ap_channel_done_data0_load_15_loc_ch,
        if_dout => data0_load_15_loc_ch_dout,
        if_empty_n => data0_load_15_loc_ch_empty_n,
        if_read => Loop_sizeLoop_proc_U0_ap_ready);





    ap_sync_reg_Block_codeRepl50_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_codeRepl50_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_codeRepl50_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_codeRepl50_pro_U0_ap_ready <= ap_sync_Block_codeRepl50_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_sizeLoop_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_sizeLoop_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_sizeLoop_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_sizeLoop_proc_U0_ap_ready <= ap_sync_Loop_sizeLoop_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_10_loc_ch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_10_loc_ch <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_10_loc_ch <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_10_loc_ch <= ap_sync_channel_write_data0_load_10_loc_ch;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_11_loc_ch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_11_loc_ch <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_11_loc_ch <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_11_loc_ch <= ap_sync_channel_write_data0_load_11_loc_ch;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_12_loc_ch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_12_loc_ch <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_12_loc_ch <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_12_loc_ch <= ap_sync_channel_write_data0_load_12_loc_ch;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_13_loc_ch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_13_loc_ch <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_13_loc_ch <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_13_loc_ch <= ap_sync_channel_write_data0_load_13_loc_ch;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_14_loc_ch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_14_loc_ch <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_14_loc_ch <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_14_loc_ch <= ap_sync_channel_write_data0_load_14_loc_ch;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_15_loc_ch_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_15_loc_ch <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_15_loc_ch <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_15_loc_ch <= ap_sync_channel_write_data0_load_15_loc_ch;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_1_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_1_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_1_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_1_loc_cha <= ap_sync_channel_write_data0_load_1_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_2_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_2_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_2_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_2_loc_cha <= ap_sync_channel_write_data0_load_2_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_3_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_3_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_3_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_3_loc_cha <= ap_sync_channel_write_data0_load_3_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_4_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_4_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_4_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_4_loc_cha <= ap_sync_channel_write_data0_load_4_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_5_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_5_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_5_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_5_loc_cha <= ap_sync_channel_write_data0_load_5_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_6_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_6_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_6_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_6_loc_cha <= ap_sync_channel_write_data0_load_6_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_7_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_7_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_7_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_7_loc_cha <= ap_sync_channel_write_data0_load_7_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_8_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_8_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_8_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_8_loc_cha <= ap_sync_channel_write_data0_load_8_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_9_loc_cha_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_9_loc_cha <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_9_loc_cha <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_9_loc_cha <= ap_sync_channel_write_data0_load_9_loc_cha;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data0_load_loc_chann_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data0_load_loc_chann <= ap_const_logic_0;
            else
                if (((Block_codeRepl50_pro_U0_ap_done and Block_codeRepl50_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data0_load_loc_chann <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data0_load_loc_chann <= ap_sync_channel_write_data0_load_loc_chann;
                end if; 
            end if;
        end if;
    end process;


    Block_codeRepl50_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Block_codeRepl50_pro_U0_ap_ready))) then 
                Block_codeRepl50_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_codeRepl50_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_codeRepl50_pro_U0_ap_ready))) then 
                Block_codeRepl50_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_codeRepl50_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_sizeLoop_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Loop_sizeLoop_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Loop_sizeLoop_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_sizeLoop_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Loop_sizeLoop_proc_U0_ap_ready))) then 
                Loop_sizeLoop_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_sizeLoop_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_codeRepl50_pro_U0_ap_continue <= (ap_sync_channel_write_data0_load_loc_chann and ap_sync_channel_write_data0_load_9_loc_cha and ap_sync_channel_write_data0_load_8_loc_cha and ap_sync_channel_write_data0_load_7_loc_cha and ap_sync_channel_write_data0_load_6_loc_cha and ap_sync_channel_write_data0_load_5_loc_cha and ap_sync_channel_write_data0_load_4_loc_cha and ap_sync_channel_write_data0_load_3_loc_cha and ap_sync_channel_write_data0_load_2_loc_cha and ap_sync_channel_write_data0_load_1_loc_cha and ap_sync_channel_write_data0_load_15_loc_ch and ap_sync_channel_write_data0_load_14_loc_ch and ap_sync_channel_write_data0_load_13_loc_ch and ap_sync_channel_write_data0_load_12_loc_ch and ap_sync_channel_write_data0_load_11_loc_ch and ap_sync_channel_write_data0_load_10_loc_ch);
    Block_codeRepl50_pro_U0_ap_start <= ((ap_sync_reg_Block_codeRepl50_pro_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_codeRepl50_pro_U0_start_full_n <= ap_const_logic_1;
    Block_codeRepl50_pro_U0_start_write <= ap_const_logic_0;
    Loop_sizeLoop_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_sizeLoop_proc_U0_ap_start <= ((ap_sync_reg_Loop_sizeLoop_proc_U0_ap_ready xor ap_const_logic_1) and data0_load_loc_chann_empty_n and data0_load_9_loc_cha_empty_n and data0_load_8_loc_cha_empty_n and data0_load_7_loc_cha_empty_n and data0_load_6_loc_cha_empty_n and data0_load_5_loc_cha_empty_n and data0_load_4_loc_cha_empty_n and data0_load_3_loc_cha_empty_n and data0_load_2_loc_cha_empty_n and data0_load_1_loc_cha_empty_n and data0_load_15_loc_ch_empty_n and data0_load_14_loc_ch_empty_n and data0_load_13_loc_ch_empty_n and data0_load_12_loc_ch_empty_n and data0_load_11_loc_ch_empty_n and data0_load_10_loc_ch_empty_n and ap_start);
    Loop_sizeLoop_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_sizeLoop_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_data0_load_10_loc_ch <= ((ap_sync_reg_channel_write_data0_load_10_loc_ch xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_11_loc_ch <= ((ap_sync_reg_channel_write_data0_load_11_loc_ch xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_12_loc_ch <= ((ap_sync_reg_channel_write_data0_load_12_loc_ch xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_13_loc_ch <= ((ap_sync_reg_channel_write_data0_load_13_loc_ch xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_14_loc_ch <= ((ap_sync_reg_channel_write_data0_load_14_loc_ch xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_15_loc_ch <= ((ap_sync_reg_channel_write_data0_load_15_loc_ch xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_1_loc_cha <= ((ap_sync_reg_channel_write_data0_load_1_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_2_loc_cha <= ((ap_sync_reg_channel_write_data0_load_2_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_3_loc_cha <= ((ap_sync_reg_channel_write_data0_load_3_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_4_loc_cha <= ((ap_sync_reg_channel_write_data0_load_4_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_5_loc_cha <= ((ap_sync_reg_channel_write_data0_load_5_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_6_loc_cha <= ((ap_sync_reg_channel_write_data0_load_6_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_7_loc_cha <= ((ap_sync_reg_channel_write_data0_load_7_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_8_loc_cha <= ((ap_sync_reg_channel_write_data0_load_8_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_9_loc_cha <= ((ap_sync_reg_channel_write_data0_load_9_loc_cha xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_channel_done_data0_load_loc_chann <= ((ap_sync_reg_channel_write_data0_load_loc_chann xor ap_const_logic_1) and Block_codeRepl50_pro_U0_ap_done);
    ap_done <= Loop_sizeLoop_proc_U0_ap_done;
    ap_idle <= ((data0_load_15_loc_ch_empty_n xor ap_const_logic_1) and (data0_load_14_loc_ch_empty_n xor ap_const_logic_1) and (data0_load_13_loc_ch_empty_n xor ap_const_logic_1) and (data0_load_12_loc_ch_empty_n xor ap_const_logic_1) and (data0_load_11_loc_ch_empty_n xor ap_const_logic_1) and (data0_load_10_loc_ch_empty_n xor ap_const_logic_1) and (data0_load_9_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_8_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_7_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_6_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_5_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_4_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_3_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_2_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_1_loc_cha_empty_n xor ap_const_logic_1) and (data0_load_loc_chann_empty_n xor ap_const_logic_1) and Loop_sizeLoop_proc_U0_ap_idle and Block_codeRepl50_pro_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Block_codeRepl50_pro_U0_ap_ready <= (ap_sync_reg_Block_codeRepl50_pro_U0_ap_ready or Block_codeRepl50_pro_U0_ap_ready);
    ap_sync_Loop_sizeLoop_proc_U0_ap_ready <= (ap_sync_reg_Loop_sizeLoop_proc_U0_ap_ready or Loop_sizeLoop_proc_U0_ap_ready);
    ap_sync_channel_write_data0_load_10_loc_ch <= ((data0_load_10_loc_ch_full_n and ap_channel_done_data0_load_10_loc_ch) or ap_sync_reg_channel_write_data0_load_10_loc_ch);
    ap_sync_channel_write_data0_load_11_loc_ch <= ((data0_load_11_loc_ch_full_n and ap_channel_done_data0_load_11_loc_ch) or ap_sync_reg_channel_write_data0_load_11_loc_ch);
    ap_sync_channel_write_data0_load_12_loc_ch <= ((data0_load_12_loc_ch_full_n and ap_channel_done_data0_load_12_loc_ch) or ap_sync_reg_channel_write_data0_load_12_loc_ch);
    ap_sync_channel_write_data0_load_13_loc_ch <= ((data0_load_13_loc_ch_full_n and ap_channel_done_data0_load_13_loc_ch) or ap_sync_reg_channel_write_data0_load_13_loc_ch);
    ap_sync_channel_write_data0_load_14_loc_ch <= ((data0_load_14_loc_ch_full_n and ap_channel_done_data0_load_14_loc_ch) or ap_sync_reg_channel_write_data0_load_14_loc_ch);
    ap_sync_channel_write_data0_load_15_loc_ch <= ((data0_load_15_loc_ch_full_n and ap_channel_done_data0_load_15_loc_ch) or ap_sync_reg_channel_write_data0_load_15_loc_ch);
    ap_sync_channel_write_data0_load_1_loc_cha <= ((data0_load_1_loc_cha_full_n and ap_channel_done_data0_load_1_loc_cha) or ap_sync_reg_channel_write_data0_load_1_loc_cha);
    ap_sync_channel_write_data0_load_2_loc_cha <= ((data0_load_2_loc_cha_full_n and ap_channel_done_data0_load_2_loc_cha) or ap_sync_reg_channel_write_data0_load_2_loc_cha);
    ap_sync_channel_write_data0_load_3_loc_cha <= ((data0_load_3_loc_cha_full_n and ap_channel_done_data0_load_3_loc_cha) or ap_sync_reg_channel_write_data0_load_3_loc_cha);
    ap_sync_channel_write_data0_load_4_loc_cha <= ((data0_load_4_loc_cha_full_n and ap_channel_done_data0_load_4_loc_cha) or ap_sync_reg_channel_write_data0_load_4_loc_cha);
    ap_sync_channel_write_data0_load_5_loc_cha <= ((data0_load_5_loc_cha_full_n and ap_channel_done_data0_load_5_loc_cha) or ap_sync_reg_channel_write_data0_load_5_loc_cha);
    ap_sync_channel_write_data0_load_6_loc_cha <= ((data0_load_6_loc_cha_full_n and ap_channel_done_data0_load_6_loc_cha) or ap_sync_reg_channel_write_data0_load_6_loc_cha);
    ap_sync_channel_write_data0_load_7_loc_cha <= ((data0_load_7_loc_cha_full_n and ap_channel_done_data0_load_7_loc_cha) or ap_sync_reg_channel_write_data0_load_7_loc_cha);
    ap_sync_channel_write_data0_load_8_loc_cha <= ((data0_load_8_loc_cha_full_n and ap_channel_done_data0_load_8_loc_cha) or ap_sync_reg_channel_write_data0_load_8_loc_cha);
    ap_sync_channel_write_data0_load_9_loc_cha <= ((data0_load_9_loc_cha_full_n and ap_channel_done_data0_load_9_loc_cha) or ap_sync_reg_channel_write_data0_load_9_loc_cha);
    ap_sync_channel_write_data0_load_loc_chann <= ((data0_load_loc_chann_full_n and ap_channel_done_data0_load_loc_chann) or ap_sync_reg_channel_write_data0_load_loc_chann);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_sizeLoop_proc_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_sizeLoop_proc_U0_ap_ready and ap_sync_Block_codeRepl50_pro_U0_ap_ready);
    data0_address <= Block_codeRepl50_pro_U0_data0_address;
    data0_dataout <= Block_codeRepl50_pro_U0_data0_dataout;
    data0_req_din <= Block_codeRepl50_pro_U0_data0_req_din;
    data0_req_write <= Block_codeRepl50_pro_U0_data0_req_write;
    data0_rsp_read <= Block_codeRepl50_pro_U0_data0_rsp_read;
    data0_size <= Block_codeRepl50_pro_U0_data0_size;
    data1_address <= Loop_sizeLoop_proc_U0_data1_address;
    data1_dataout <= Loop_sizeLoop_proc_U0_data1_dataout;
    data1_req_din <= Loop_sizeLoop_proc_U0_data1_req_din;
    data1_req_write <= Loop_sizeLoop_proc_U0_data1_req_write;
    data1_rsp_read <= Loop_sizeLoop_proc_U0_data1_rsp_read;
    data1_size <= Loop_sizeLoop_proc_U0_data1_size;
    data2_address <= Loop_sizeLoop_proc_U0_data2_address;
    data2_dataout <= Loop_sizeLoop_proc_U0_data2_dataout;
    data2_req_din <= Loop_sizeLoop_proc_U0_data2_req_din;
    data2_req_write <= Loop_sizeLoop_proc_U0_data2_req_write;
    data2_rsp_read <= Loop_sizeLoop_proc_U0_data2_rsp_read;
    data2_size <= Loop_sizeLoop_proc_U0_data2_size;
end behav;
