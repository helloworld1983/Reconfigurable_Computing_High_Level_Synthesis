-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myFuncAccel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    dim : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_req_din : OUT STD_LOGIC;
    data0_req_full_n : IN STD_LOGIC;
    data0_req_write : OUT STD_LOGIC;
    data0_rsp_empty_n : IN STD_LOGIC;
    data0_rsp_read : OUT STD_LOGIC;
    data0_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data0_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data0_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_req_din : OUT STD_LOGIC;
    data1_req_full_n : IN STD_LOGIC;
    data1_req_write : OUT STD_LOGIC;
    data1_rsp_empty_n : IN STD_LOGIC;
    data1_rsp_read : OUT STD_LOGIC;
    data1_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data1_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_req_din : OUT STD_LOGIC;
    data2_req_full_n : IN STD_LOGIC;
    data2_req_write : OUT STD_LOGIC;
    data2_rsp_empty_n : IN STD_LOGIC;
    data2_rsp_read : OUT STD_LOGIC;
    data2_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data2_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myFuncAccel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myFuncAccel,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=127001,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=765,HLS_SYN_LUT=1402,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_42C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110010000000000000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal l_1_reg_157 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8 : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13 : BOOLEAN;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18 : BOOLEAN;
    signal reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal i_1_fu_222_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_350 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal data2_addr_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_addr_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_fu_259_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_370 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_6_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_0iter_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_0iter_reg_381 : STD_LOGIC_VECTOR (0 downto 0);
    signal data0_addr_read_3_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_state19 : BOOLEAN;
    signal data1_addr_read_3_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_3_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_8_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state35_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state37_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_8_reg_400_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal l_fu_300_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal data2_addr_read_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state35 : STD_LOGIC;
    signal i_reg_135 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_state41 : BOOLEAN;
    signal k_1_reg_146 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_4_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_state38 : BOOLEAN;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_228_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_265_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_269_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal data2_load_to_int_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_309_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_319_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_180_ce : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_185_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myFuncAccel_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1 : component myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        ce => grp_fu_180_ce,
        dout => grp_fu_180_p2);

    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2 : component myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_185_p0,
        din1 => grp_fu_185_p1,
        ce => grp_fu_185_ce,
        dout => grp_fu_185_p2);

    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3 : component myFuncAccel_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => data2_addr_read_reg_409,
        din1 => ap_const_lv32_42C80000,
        opcode => ap_const_lv5_2,
        dout => tmp_13_fu_189_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state35) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state35)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state35);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                i_reg_135 <= i_1_reg_350;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_135 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_1_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data2_req_full_n = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    k_1_reg_146 <= ap_const_lv3_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    k_1_reg_146 <= k_reg_370;
                end if;
            end if; 
        end if;
    end process;

    l_1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                l_1_reg_157 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_8_fu_294_p2 = ap_const_lv1_0))) then 
                l_1_reg_157 <= l_fu_300_p2;
            end if; 
        end if;
    end process;

    r_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                r_reg_168 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_8_reg_400_pp0_iter1_reg = ap_const_lv1_0))) then 
                r_reg_168 <= tmp_14_fu_341_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                data0_addr_read_3_reg_385 <= data0_datain;
                data1_addr_read_3_reg_390 <= data1_datain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_0))) then
                    data1_addr_reg_361(11 downto 2) <= tmp_4_fu_236_p1(32 - 1 downto 0)(11 downto 2);
                    data2_addr_reg_355(11 downto 2) <= tmp_4_fu_236_p1(32 - 1 downto 0)(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_8_reg_400 = ap_const_lv1_0))) then
                data2_addr_read_reg_409 <= data2_datain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_350 <= i_1_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_fu_253_p2 = ap_const_lv1_0))) then
                is_0iter_reg_381 <= is_0iter_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_reg_370 <= k_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then
                reg_194 <= data0_datain;
                reg_199 <= data1_datain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_204 <= grp_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_210 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_18_3_reg_395 <= grp_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_8_reg_400 <= tmp_8_fu_294_p2;
                tmp_8_reg_400_pp0_iter1_reg <= tmp_8_reg_400;
            end if;
        end if;
    end process;
    data2_addr_reg_355(1 downto 0) <= "00";
    data2_addr_reg_355(31 downto 12) <= "00000000000000000000";
    data1_addr_reg_361(1 downto 0) <= "00";
    data1_addr_reg_361(31 downto 12) <= "00000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data0_rsp_empty_n, data1_rsp_empty_n, data2_req_full_n, r_reg_168, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state2, tmp_fu_216_p2, ap_CS_fsm_state6, tmp_6_fu_253_p2, ap_CS_fsm_state19, tmp_8_fu_294_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state41, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_fu_253_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if ((not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if ((not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if ((not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_8_fu_294_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_8_fu_294_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                if ((not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state38) and (r_reg_168 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif ((not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state38) and (r_reg_168 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if ((not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(35);
    ap_CS_fsm_state39 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(37);
    ap_CS_fsm_state41 <= ap_CS_fsm(38);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(data2_rsp_empty_n, tmp_8_reg_400, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_00001 <= ((data2_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_8_reg_400 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data2_rsp_empty_n, tmp_8_reg_400, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((data2_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_8_reg_400 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data2_rsp_empty_n, tmp_8_reg_400, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((data2_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_8_reg_400 = ap_const_lv1_0));
    end process;


    ap_block_state13_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n)
    begin
                ap_block_state13 <= ((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0));
    end process;


    ap_block_state18_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n)
    begin
                ap_block_state18 <= ((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0));
    end process;


    ap_block_state19_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n)
    begin
                ap_block_state19 <= ((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(data2_req_full_n, tmp_fu_216_p2)
    begin
                ap_block_state2 <= ((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0));
    end process;

        ap_block_state35_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_pp0_stage0_iter1_assign_proc : process(data2_rsp_empty_n, tmp_8_reg_400)
    begin
                ap_block_state36_pp0_stage0_iter1 <= ((data2_rsp_empty_n = ap_const_logic_0) and (tmp_8_reg_400 = ap_const_lv1_0));
    end process;

        ap_block_state37_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_assign_proc : process(data2_req_full_n, r_reg_168)
    begin
                ap_block_state38 <= ((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1));
    end process;


    ap_block_state41_assign_proc : process(data2_req_full_n, r_reg_168)
    begin
                ap_block_state41 <= ((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1));
    end process;


    ap_block_state8_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n)
    begin
                ap_block_state8 <= ((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state35_assign_proc : process(tmp_8_fu_294_p2)
    begin
        if ((tmp_8_fu_294_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state35 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(data2_req_full_n, ap_CS_fsm_state2, tmp_fu_216_p2)
    begin
        if ((not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(data2_req_full_n, ap_CS_fsm_state2, tmp_fu_216_p2)
    begin
        if ((not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data0_address <= tmp_s_fu_277_p1(32 - 1 downto 0);
    data0_dataout <= ap_const_lv32_0;
    data0_req_din <= ap_const_logic_0;

    data0_req_write_assign_proc : process(ap_CS_fsm_state6, tmp_6_fu_253_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_fu_253_p2 = ap_const_lv1_0))) then 
            data0_req_write <= ap_const_logic_1;
        else 
            data0_req_write <= ap_const_logic_0;
        end if; 
    end process;


    data0_rsp_read_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            data0_rsp_read <= ap_const_logic_1;
        else 
            data0_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    data0_size <= ap_const_lv32_4;
    data1_address <= data1_addr_reg_361;
    data1_dataout <= ap_const_lv32_0;
    data1_req_din <= ap_const_logic_0;

    data1_req_write_assign_proc : process(ap_CS_fsm_state6, tmp_6_fu_253_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_fu_253_p2 = ap_const_lv1_0))) then 
            data1_req_write <= ap_const_logic_1;
        else 
            data1_req_write <= ap_const_logic_0;
        end if; 
    end process;


    data1_rsp_read_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            data1_rsp_read <= ap_const_logic_1;
        else 
            data1_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    data1_size <= ap_const_lv32_4;

    data2_address_assign_proc : process(data2_req_full_n, r_reg_168, ap_CS_fsm_state2, tmp_fu_216_p2, data2_addr_reg_355, ap_CS_fsm_state6, tmp_6_fu_253_p2, is_0iter_reg_381, ap_CS_fsm_state33, tmp_4_fu_236_p1, ap_CS_fsm_state38)
    begin
        if ((((data2_req_full_n = ap_const_logic_1) and (is_0iter_reg_381 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or (not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state38) and (r_reg_168 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_fu_253_p2 = ap_const_lv1_1)))) then 
            data2_address <= data2_addr_reg_355;
        elsif ((not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_0))) then 
            data2_address <= tmp_4_fu_236_p1(32 - 1 downto 0);
        else 
            data2_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data2_dataout_assign_proc : process(data2_req_full_n, r_reg_168, reg_210, ap_CS_fsm_state2, tmp_fu_216_p2, ap_CS_fsm_state41, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            data2_dataout <= reg_210;
        elsif ((((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state38) and (r_reg_168 = ap_const_lv1_1)) or (not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (r_reg_168 = ap_const_lv1_1)) or (not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_0)))) then 
            data2_dataout <= ap_const_lv32_0;
        else 
            data2_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    data2_load_to_int_fu_306_p1 <= data2_addr_read_reg_409;

    data2_req_din_assign_proc : process(data2_req_full_n, r_reg_168, ap_CS_fsm_state2, tmp_fu_216_p2, ap_CS_fsm_state6, tmp_6_fu_253_p2, is_0iter_reg_381, ap_CS_fsm_state41, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_fu_253_p2 = ap_const_lv1_1))) then 
            data2_req_din <= ap_const_logic_0;
        elsif ((((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((data2_req_full_n = ap_const_logic_1) and (is_0iter_reg_381 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or (not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state38) and (r_reg_168 = ap_const_lv1_1)) or (not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (r_reg_168 = ap_const_lv1_1)) or (not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_0)))) then 
            data2_req_din <= ap_const_logic_1;
        else 
            data2_req_din <= ap_const_logic_0;
        end if; 
    end process;


    data2_req_write_assign_proc : process(data2_req_full_n, r_reg_168, ap_CS_fsm_state2, tmp_fu_216_p2, ap_CS_fsm_state6, tmp_6_fu_253_p2, is_0iter_reg_381, ap_CS_fsm_state41, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((data2_req_full_n = ap_const_logic_1) and (is_0iter_reg_381 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or (not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state38) and (r_reg_168 = ap_const_lv1_1)) or (not(((data2_req_full_n = ap_const_logic_0) and (r_reg_168 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state41) and (r_reg_168 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_6_fu_253_p2 = ap_const_lv1_1)) or (not(((data2_req_full_n = ap_const_logic_0) and (tmp_fu_216_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_216_p2 = ap_const_lv1_0)))) then 
            data2_req_write <= ap_const_logic_1;
        else 
            data2_req_write <= ap_const_logic_0;
        end if; 
    end process;


    data2_rsp_read_assign_proc : process(tmp_8_reg_400, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_8_reg_400 = ap_const_lv1_0))) then 
            data2_rsp_read <= ap_const_logic_1;
        else 
            data2_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    data2_size <= ap_const_lv32_4;

    grp_fu_180_ce_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            grp_fu_180_ce <= ap_const_logic_1;
        else 
            grp_fu_180_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_180_p0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, reg_204, reg_210, ap_CS_fsm_state23, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_180_p0 <= reg_210;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_180_p0 <= reg_204;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, reg_204, tmp_18_3_reg_395, ap_CS_fsm_state23, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_180_p1 <= tmp_18_3_reg_395;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_180_p1 <= reg_204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_180_p1 <= ap_const_lv32_0;
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_185_ce_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state19, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (not(((data1_rsp_empty_n = ap_const_logic_0) or (data0_rsp_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            grp_fu_185_ce <= ap_const_logic_1;
        else 
            grp_fu_185_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_185_p0_assign_proc : process(reg_194, data0_addr_read_3_reg_385, ap_CS_fsm_state19, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_185_p0 <= data0_addr_read_3_reg_385;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_185_p0 <= reg_194;
        else 
            grp_fu_185_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_185_p1_assign_proc : process(reg_199, ap_CS_fsm_state19, data1_addr_read_3_reg_390, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_185_p1 <= data1_addr_read_3_reg_390;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_185_p1 <= reg_199;
        else 
            grp_fu_185_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_222_p2 <= std_logic_vector(unsigned(i_reg_135) + unsigned(ap_const_lv10_1));
    is_0iter_fu_288_p2 <= "1" when (k_1_reg_146 = ap_const_lv3_0) else "0";
    k_fu_259_p2 <= std_logic_vector(unsigned(k_1_reg_146) + unsigned(ap_const_lv3_1));
    l_fu_300_p2 <= std_logic_vector(unsigned(l_1_reg_157) + unsigned(ap_const_lv3_1));
    notlhs_fu_323_p2 <= "0" when (tmp_10_fu_309_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_329_p2 <= "1" when (tmp_11_fu_319_p1 = ap_const_lv23_0) else "0";
    tmp_10_fu_309_p4 <= data2_load_to_int_fu_306_p1(30 downto 23);
    tmp_11_fu_319_p1 <= data2_load_to_int_fu_306_p1(23 - 1 downto 0);
    tmp_12_fu_335_p2 <= (notrhs_fu_329_p2 or notlhs_fu_323_p2);
    tmp_14_fu_341_p2 <= (tmp_13_fu_189_p2 and tmp_12_fu_335_p2);
    tmp_1_fu_228_p3 <= (i_reg_135 & ap_const_lv2_0);
    tmp_3_fu_265_p1 <= k_1_reg_146(2 - 1 downto 0);
    tmp_4_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_228_p3),64));
    tmp_6_fu_253_p2 <= "1" when (k_1_reg_146 = ap_const_lv3_4) else "0";
    tmp_7_fu_269_p3 <= (tmp_3_fu_265_p1 & ap_const_lv2_0);
    tmp_8_fu_294_p2 <= "1" when (l_1_reg_157 = ap_const_lv3_4) else "0";
    tmp_fu_216_p2 <= "1" when (i_reg_135 = ap_const_lv10_3E8) else "0";
    tmp_s_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_269_p3),64));
end behav;
