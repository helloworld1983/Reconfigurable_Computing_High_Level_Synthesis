// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myFuncAccel_HH_
#define _myFuncAccel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1.h"
#include "myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1.h"
#include "myFuncAccel_fcmp_32ns_32ns_1_1_1.h"

namespace ap_rtl {

struct myFuncAccel : public sc_module {
    // Port declarations 36
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > size;
    sc_in< sc_lv<32> > dim;
    sc_in< sc_lv<32> > threshold;
    sc_out< sc_logic > data0_req_din;
    sc_in< sc_logic > data0_req_full_n;
    sc_out< sc_logic > data0_req_write;
    sc_in< sc_logic > data0_rsp_empty_n;
    sc_out< sc_logic > data0_rsp_read;
    sc_out< sc_lv<32> > data0_address;
    sc_in< sc_lv<32> > data0_datain;
    sc_out< sc_lv<32> > data0_dataout;
    sc_out< sc_lv<32> > data0_size;
    sc_out< sc_logic > data1_req_din;
    sc_in< sc_logic > data1_req_full_n;
    sc_out< sc_logic > data1_req_write;
    sc_in< sc_logic > data1_rsp_empty_n;
    sc_out< sc_logic > data1_rsp_read;
    sc_out< sc_lv<32> > data1_address;
    sc_in< sc_lv<32> > data1_datain;
    sc_out< sc_lv<32> > data1_dataout;
    sc_out< sc_lv<32> > data1_size;
    sc_out< sc_logic > data2_req_din;
    sc_in< sc_logic > data2_req_full_n;
    sc_out< sc_logic > data2_req_write;
    sc_in< sc_logic > data2_rsp_empty_n;
    sc_out< sc_logic > data2_rsp_read;
    sc_out< sc_lv<32> > data2_address;
    sc_in< sc_lv<32> > data2_datain;
    sc_out< sc_lv<32> > data2_dataout;
    sc_out< sc_lv<32> > data2_size;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    myFuncAccel(sc_module_name name);
    SC_HAS_PROCESS(myFuncAccel);

    ~myFuncAccel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>* myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1;
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>* myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2;
    myFuncAccel_fcmp_32ns_32ns_1_1_1<1,1,32,32,1>* myFuncAccel_fcmp_32ns_32ns_1_1_1_U3;
    sc_signal< sc_lv<39> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > l_1_reg_157;
    sc_signal< sc_lv<1> > r_reg_168;
    sc_signal< sc_lv<32> > reg_194;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_state8;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< bool > ap_block_state13;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< bool > ap_block_state18;
    sc_signal< sc_lv<32> > reg_199;
    sc_signal< sc_lv<32> > grp_fu_185_p2;
    sc_signal< sc_lv<32> > reg_204;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_lv<32> > grp_fu_180_p2;
    sc_signal< sc_lv<32> > reg_210;
    sc_signal< sc_logic > ap_CS_fsm_state27;
    sc_signal< sc_logic > ap_CS_fsm_state32;
    sc_signal< sc_lv<10> > i_1_fu_222_p2;
    sc_signal< sc_lv<10> > i_1_reg_350;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_216_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<32> > data2_addr_reg_355;
    sc_signal< sc_lv<32> > data1_addr_reg_361;
    sc_signal< sc_lv<3> > k_fu_259_p2;
    sc_signal< sc_lv<3> > k_reg_370;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > tmp_6_fu_253_p2;
    sc_signal< sc_lv<1> > is_0iter_fu_288_p2;
    sc_signal< sc_lv<1> > is_0iter_reg_381;
    sc_signal< sc_lv<32> > data0_addr_read_3_reg_385;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< bool > ap_block_state19;
    sc_signal< sc_lv<32> > data1_addr_read_3_reg_390;
    sc_signal< sc_lv<32> > tmp_18_3_reg_395;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<1> > tmp_8_fu_294_p2;
    sc_signal< sc_lv<1> > tmp_8_reg_400;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state35_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state36_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state37_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_8_reg_400_pp0_iter1_reg;
    sc_signal< sc_lv<3> > l_fu_300_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > data2_addr_read_reg_409;
    sc_signal< sc_lv<1> > tmp_14_fu_341_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state34;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state35;
    sc_signal< sc_lv<10> > i_reg_135;
    sc_signal< sc_logic > ap_CS_fsm_state41;
    sc_signal< bool > ap_block_state41;
    sc_signal< sc_lv<3> > k_1_reg_146;
    sc_signal< sc_logic > ap_CS_fsm_state33;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > tmp_4_fu_236_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_277_p1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state38;
    sc_signal< bool > ap_block_state38;
    sc_signal< sc_logic > ap_CS_fsm_state39;
    sc_signal< sc_logic > ap_CS_fsm_state40;
    sc_signal< sc_lv<32> > grp_fu_180_p0;
    sc_signal< sc_lv<32> > grp_fu_180_p1;
    sc_signal< sc_logic > ap_CS_fsm_state28;
    sc_signal< sc_lv<32> > grp_fu_185_p0;
    sc_signal< sc_lv<32> > grp_fu_185_p1;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<12> > tmp_1_fu_228_p3;
    sc_signal< sc_lv<2> > tmp_3_fu_265_p1;
    sc_signal< sc_lv<4> > tmp_7_fu_269_p3;
    sc_signal< sc_lv<32> > data2_load_to_int_fu_306_p1;
    sc_signal< sc_lv<8> > tmp_10_fu_309_p4;
    sc_signal< sc_lv<23> > tmp_11_fu_319_p1;
    sc_signal< sc_lv<1> > notrhs_fu_329_p2;
    sc_signal< sc_lv<1> > notlhs_fu_323_p2;
    sc_signal< sc_lv<1> > tmp_12_fu_335_p2;
    sc_signal< sc_lv<1> > tmp_13_fu_189_p2;
    sc_signal< sc_logic > grp_fu_180_ce;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_logic > ap_CS_fsm_state26;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_logic > ap_CS_fsm_state30;
    sc_signal< sc_logic > ap_CS_fsm_state31;
    sc_signal< sc_logic > grp_fu_185_ce;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< bool > ap_block_pp0_stage0_00001;
    sc_signal< sc_lv<39> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<39> ap_ST_fsm_state1;
    static const sc_lv<39> ap_ST_fsm_state2;
    static const sc_lv<39> ap_ST_fsm_state3;
    static const sc_lv<39> ap_ST_fsm_state4;
    static const sc_lv<39> ap_ST_fsm_state5;
    static const sc_lv<39> ap_ST_fsm_state6;
    static const sc_lv<39> ap_ST_fsm_state7;
    static const sc_lv<39> ap_ST_fsm_state8;
    static const sc_lv<39> ap_ST_fsm_state9;
    static const sc_lv<39> ap_ST_fsm_state10;
    static const sc_lv<39> ap_ST_fsm_state11;
    static const sc_lv<39> ap_ST_fsm_state12;
    static const sc_lv<39> ap_ST_fsm_state13;
    static const sc_lv<39> ap_ST_fsm_state14;
    static const sc_lv<39> ap_ST_fsm_state15;
    static const sc_lv<39> ap_ST_fsm_state16;
    static const sc_lv<39> ap_ST_fsm_state17;
    static const sc_lv<39> ap_ST_fsm_state18;
    static const sc_lv<39> ap_ST_fsm_state19;
    static const sc_lv<39> ap_ST_fsm_state20;
    static const sc_lv<39> ap_ST_fsm_state21;
    static const sc_lv<39> ap_ST_fsm_state22;
    static const sc_lv<39> ap_ST_fsm_state23;
    static const sc_lv<39> ap_ST_fsm_state24;
    static const sc_lv<39> ap_ST_fsm_state25;
    static const sc_lv<39> ap_ST_fsm_state26;
    static const sc_lv<39> ap_ST_fsm_state27;
    static const sc_lv<39> ap_ST_fsm_state28;
    static const sc_lv<39> ap_ST_fsm_state29;
    static const sc_lv<39> ap_ST_fsm_state30;
    static const sc_lv<39> ap_ST_fsm_state31;
    static const sc_lv<39> ap_ST_fsm_state32;
    static const sc_lv<39> ap_ST_fsm_state33;
    static const sc_lv<39> ap_ST_fsm_state34;
    static const sc_lv<39> ap_ST_fsm_pp0_stage0;
    static const sc_lv<39> ap_ST_fsm_state38;
    static const sc_lv<39> ap_ST_fsm_state39;
    static const sc_lv<39> ap_ST_fsm_state40;
    static const sc_lv<39> ap_ST_fsm_state41;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_22;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_21;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_26;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<32> ap_const_lv32_25;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_42C80000;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state27();
    void thread_ap_CS_fsm_state28();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state30();
    void thread_ap_CS_fsm_state31();
    void thread_ap_CS_fsm_state32();
    void thread_ap_CS_fsm_state33();
    void thread_ap_CS_fsm_state34();
    void thread_ap_CS_fsm_state38();
    void thread_ap_CS_fsm_state39();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state40();
    void thread_ap_CS_fsm_state41();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_00001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state13();
    void thread_ap_block_state18();
    void thread_ap_block_state19();
    void thread_ap_block_state2();
    void thread_ap_block_state35_pp0_stage0_iter0();
    void thread_ap_block_state36_pp0_stage0_iter1();
    void thread_ap_block_state37_pp0_stage0_iter2();
    void thread_ap_block_state38();
    void thread_ap_block_state41();
    void thread_ap_block_state8();
    void thread_ap_condition_pp0_exit_iter0_state35();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_data0_address();
    void thread_data0_dataout();
    void thread_data0_req_din();
    void thread_data0_req_write();
    void thread_data0_rsp_read();
    void thread_data0_size();
    void thread_data1_address();
    void thread_data1_dataout();
    void thread_data1_req_din();
    void thread_data1_req_write();
    void thread_data1_rsp_read();
    void thread_data1_size();
    void thread_data2_address();
    void thread_data2_dataout();
    void thread_data2_load_to_int_fu_306_p1();
    void thread_data2_req_din();
    void thread_data2_req_write();
    void thread_data2_rsp_read();
    void thread_data2_size();
    void thread_grp_fu_180_ce();
    void thread_grp_fu_180_p0();
    void thread_grp_fu_180_p1();
    void thread_grp_fu_185_ce();
    void thread_grp_fu_185_p0();
    void thread_grp_fu_185_p1();
    void thread_i_1_fu_222_p2();
    void thread_is_0iter_fu_288_p2();
    void thread_k_fu_259_p2();
    void thread_l_fu_300_p2();
    void thread_notlhs_fu_323_p2();
    void thread_notrhs_fu_329_p2();
    void thread_tmp_10_fu_309_p4();
    void thread_tmp_11_fu_319_p1();
    void thread_tmp_12_fu_335_p2();
    void thread_tmp_14_fu_341_p2();
    void thread_tmp_1_fu_228_p3();
    void thread_tmp_3_fu_265_p1();
    void thread_tmp_4_fu_236_p1();
    void thread_tmp_6_fu_253_p2();
    void thread_tmp_7_fu_269_p3();
    void thread_tmp_8_fu_294_p2();
    void thread_tmp_fu_216_p2();
    void thread_tmp_s_fu_277_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
