// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myFuncAccel,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1271,HLS_SYN_LUT=1801,HLS_VERSION=2018_3}" *)

module myFuncAccel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size,
        dim,
        threshold,
        data0_req_din,
        data0_req_full_n,
        data0_req_write,
        data0_rsp_empty_n,
        data0_rsp_read,
        data0_address,
        data0_datain,
        data0_dataout,
        data0_size,
        data1_req_din,
        data1_req_full_n,
        data1_req_write,
        data1_rsp_empty_n,
        data1_rsp_read,
        data1_address,
        data1_datain,
        data1_dataout,
        data1_size,
        data2_req_din,
        data2_req_full_n,
        data2_req_write,
        data2_rsp_empty_n,
        data2_rsp_read,
        data2_address,
        data2_datain,
        data2_dataout,
        data2_size
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] size;
input  [31:0] dim;
input  [31:0] threshold;
output   data0_req_din;
input   data0_req_full_n;
output   data0_req_write;
input   data0_rsp_empty_n;
output   data0_rsp_read;
output  [31:0] data0_address;
input  [31:0] data0_datain;
output  [31:0] data0_dataout;
output  [31:0] data0_size;
output   data1_req_din;
input   data1_req_full_n;
output   data1_req_write;
input   data1_rsp_empty_n;
output   data1_rsp_read;
output  [31:0] data1_address;
input  [31:0] data1_datain;
output  [31:0] data1_dataout;
output  [31:0] data1_size;
output   data2_req_din;
input   data2_req_full_n;
output   data2_req_write;
input   data2_rsp_empty_n;
output   data2_rsp_read;
output  [31:0] data2_address;
input  [31:0] data2_datain;
output  [31:0] data2_dataout;
output  [31:0] data2_size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data0_req_write;
reg data0_rsp_read;
reg data1_req_write;
reg data1_rsp_read;
reg data2_req_din;
reg data2_req_write;
reg data2_rsp_read;
reg[31:0] data2_address;
reg[31:0] data2_dataout;
reg[31:0] data2_size;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] threshold_to_int_fu_246_p1;
reg   [31:0] threshold_to_int_reg_502;
wire   [0:0] notrhs2_fu_254_p2;
reg   [0:0] notrhs2_reg_507;
wire   [31:0] next_mul2_fu_260_p2;
reg   [31:0] next_mul2_reg_512;
wire    ap_CS_fsm_state2;
wire   [31:0] i_1_fu_270_p2;
reg   [31:0] i_1_reg_520;
wire   [63:0] tmp_1_fu_276_p1;
reg   [63:0] tmp_1_reg_525;
wire   [0:0] exitcond4_fu_265_p2;
reg   [31:0] data2_addr_reg_530;
wire   [31:0] k_2_fu_291_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_286_p2;
reg    ap_block_state3;
reg   [31:0] data1_addr_reg_546;
wire   [31:0] next_mul_fu_308_p2;
reg   [31:0] next_mul_reg_552;
wire    ap_CS_fsm_state4;
wire   [31:0] k_3_fu_318_p2;
reg   [31:0] k_3_reg_560;
wire   [0:0] exitcond2_fu_313_p2;
reg   [31:0] data2_addr_1_reg_571;
wire    ap_CS_fsm_state5;
wire   [31:0] l_4_fu_356_p2;
reg   [31:0] l_4_reg_580;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond1_fu_351_p2;
reg    ap_block_state6;
reg   [31:0] data0_addr_read_reg_585;
reg   [31:0] data1_addr_read_reg_590;
wire   [31:0] grp_fu_238_p2;
reg   [31:0] tmp_14_reg_595;
wire    ap_CS_fsm_state10;
reg   [31:0] data2_addr_1_read_reg_600;
wire   [31:0] grp_fu_234_p2;
reg   [31:0] tmp_15_reg_605;
wire    ap_CS_fsm_state15;
wire   [31:0] l_3_fu_373_p2;
reg   [31:0] l_3_reg_613;
wire    ap_CS_fsm_state17;
wire   [31:0] tmp_9_fu_379_p2;
reg   [31:0] tmp_9_reg_618;
wire   [0:0] tmp_8_fu_367_p2;
wire   [0:0] notlhs1_fu_394_p2;
reg   [0:0] notlhs1_reg_623;
wire    ap_CS_fsm_state18;
reg   [31:0] data2_addr_2_read_reg_634;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_17_fu_455_p2;
wire    ap_CS_fsm_state21;
wire   [31:0] l_5_fu_466_p2;
wire    ap_CS_fsm_state22;
reg   [0:0] r_reg_211;
wire   [0:0] exitcond_fu_461_p2;
reg    ap_predicate_op136_write_state22;
reg    ap_block_state22;
reg   [31:0] i_reg_132;
reg   [31:0] phi_mul1_reg_143;
reg   [31:0] k_reg_155;
reg   [31:0] k_1_reg_166;
reg   [31:0] phi_mul_reg_178;
reg   [31:0] l_reg_189;
wire    ap_CS_fsm_state16;
reg   [31:0] l_1_reg_200;
wire   [0:0] ap_phi_mux_r_phi_fu_215_p4;
reg   [31:0] l_2_reg_223;
wire   [63:0] tmp_2_fu_324_p1;
wire   [63:0] tmp_6_fu_341_p1;
wire   [63:0] tmp_s_fu_400_p1;
wire   [0:0] is_0iter_fu_297_p2;
wire   [0:0] is_0iter5_fu_472_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state7;
wire   [22:0] tmp_fu_250_p1;
wire   [31:0] tmp_5_fu_335_p2;
wire   [0:0] tmp_7_fu_362_p2;
wire   [7:0] tmp_10_fu_385_p4;
wire   [31:0] data2_load_to_int_fu_410_p1;
wire   [7:0] tmp_3_fu_413_p4;
wire   [22:0] tmp_4_fu_423_p1;
wire   [0:0] notrhs_fu_433_p2;
wire   [0:0] notlhs_fu_427_p2;
wire   [0:0] tmp_11_fu_439_p2;
wire   [0:0] tmp_12_fu_445_p2;
wire   [0:0] tmp_13_fu_449_p2;
wire   [0:0] tmp_16_fu_242_p2;
reg    grp_fu_238_ce;
wire    ap_CS_fsm_state9;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
end

myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data2_addr_1_read_reg_600),
    .din1(tmp_14_reg_595),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data0_addr_read_reg_585),
    .din1(data1_addr_read_reg_590),
    .ce(grp_fu_238_ce),
    .dout(grp_fu_238_p2)
);

myFuncAccel_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel_fcmp_32ns_32ns_1_1_1_U3(
    .din0(data2_addr_2_read_reg_634),
    .din1(threshold),
    .opcode(5'd2),
    .dout(tmp_16_fu_242_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & ((exitcond_fu_461_p2 == 1'd1) | (r_reg_211 == 1'd0)))) begin
        i_reg_132 <= i_1_reg_520;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_351_p2 == 1'd1))) begin
        k_1_reg_166 <= k_3_reg_560;
    end else if ((~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd1))) begin
        k_1_reg_166 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_265_p2 == 1'd0))) begin
        k_reg_155 <= 32'd0;
    end else if ((~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd0))) begin
        k_reg_155 <= k_2_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_313_p2 == 1'd1))) begin
        l_1_reg_200 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        l_1_reg_200 <= l_3_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (ap_phi_mux_r_phi_fu_215_p4 == 1'd1) & (tmp_8_fu_367_p2 == 1'd0))) begin
        l_2_reg_223 <= 32'd0;
    end else if ((~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & (r_reg_211 == 1'd1) & (exitcond_fu_461_p2 == 1'd0))) begin
        l_2_reg_223 <= l_5_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        l_reg_189 <= 32'd0;
    end else if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        l_reg_189 <= l_4_reg_580;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & ((exitcond_fu_461_p2 == 1'd1) | (r_reg_211 == 1'd0)))) begin
        phi_mul1_reg_143 <= next_mul2_reg_512;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul1_reg_143 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_351_p2 == 1'd1))) begin
        phi_mul_reg_178 <= next_mul_reg_552;
    end else if ((~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd1))) begin
        phi_mul_reg_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_313_p2 == 1'd1))) begin
        r_reg_211 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        r_reg_211 <= tmp_17_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_351_p2 == 1'd0))) begin
        data0_addr_read_reg_585 <= data0_datain;
        data1_addr_read_reg_590 <= data1_datain;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd1))) begin
        data1_addr_reg_546 <= tmp_1_reg_525;
    end
end

always @ (posedge ap_clk) begin
    if (((data2_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        data2_addr_1_read_reg_600 <= data2_datain;
        tmp_14_reg_595 <= grp_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data2_addr_1_reg_571 <= tmp_6_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((data2_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        data2_addr_2_read_reg_634 <= data2_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_265_p2 == 1'd0))) begin
        data2_addr_reg_530 <= tmp_1_fu_276_p1;
        tmp_1_reg_525[31 : 0] <= tmp_1_fu_276_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_520 <= i_1_fu_270_p2;
        next_mul2_reg_512 <= next_mul2_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_3_reg_560 <= k_3_fu_318_p2;
        next_mul_reg_552 <= next_mul_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        l_3_reg_613 <= l_3_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state6))) begin
        l_4_reg_580 <= l_4_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_8_fu_367_p2 == 1'd1))) begin
        notlhs1_reg_623 <= notlhs1_fu_394_p2;
        tmp_9_reg_618 <= tmp_9_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        notrhs2_reg_507 <= notrhs2_fu_254_p2;
        threshold_to_int_reg_502 <= threshold_to_int_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_15_reg_605 <= grp_fu_234_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_265_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_265_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_313_p2 == 1'd0))) begin
        data0_req_write = 1'b1;
    end else begin
        data0_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_351_p2 == 1'd0))) begin
        data0_rsp_read = 1'b1;
    end else begin
        data0_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_313_p2 == 1'd0))) begin
        data1_req_write = 1'b1;
    end else begin
        data1_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_351_p2 == 1'd0))) begin
        data1_rsp_read = 1'b1;
    end else begin
        data1_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        data2_address = tmp_s_fu_400_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        data2_address = data2_addr_1_reg_571;
    end else if (((~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & (is_0iter5_fu_472_p2 == 1'd1) & (r_reg_211 == 1'd1) & (exitcond_fu_461_p2 == 1'd0)) | (~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (is_0iter_fu_297_p2 == 1'd1) & (exitcond3_fu_286_p2 == 1'd0)))) begin
        data2_address = data2_addr_reg_530;
    end else begin
        data2_address = 'bx;
    end
end

always @ (*) begin
    if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        data2_dataout = tmp_15_reg_605;
    end else if (((~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (ap_predicate_op136_write_state22 == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | (~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd0)))) begin
        data2_dataout = 32'd0;
    end else begin
        data2_dataout = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state18))) begin
        data2_req_din = 1'b0;
    end else if ((((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | (~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (ap_predicate_op136_write_state22 == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | (~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & (is_0iter5_fu_472_p2 == 1'd1) & (r_reg_211 == 1'd1) & (exitcond_fu_461_p2 == 1'd0)) | (~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd0)))) begin
        data2_req_din = 1'b1;
    end else begin
        data2_req_din = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state18) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | (~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (ap_predicate_op136_write_state22 == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | (~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & (is_0iter5_fu_472_p2 == 1'd1) & (r_reg_211 == 1'd1) & (exitcond_fu_461_p2 == 1'd0)) | (~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd0)))) begin
        data2_req_write = 1'b1;
    end else begin
        data2_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((((data2_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((data2_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        data2_rsp_read = 1'b1;
    end else begin
        data2_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state18) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        data2_size = 32'd1;
    end else if (((~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & (is_0iter5_fu_472_p2 == 1'd1) & (r_reg_211 == 1'd1) & (exitcond_fu_461_p2 == 1'd0)) | (~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (is_0iter_fu_297_p2 == 1'd1) & (exitcond3_fu_286_p2 == 1'd0)))) begin
        data2_size = dim;
    end else begin
        data2_size = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | ((data2_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_238_ce = 1'b1;
    end else begin
        grp_fu_238_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_286_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_313_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~(((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_351_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~(((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_351_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((data2_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (tmp_8_fu_367_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((data2_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state22 : begin
            if ((~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & ((exitcond_fu_461_p2 == 1'd1) | (r_reg_211 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22) & (r_reg_211 == 1'd1) & (exitcond_fu_461_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state22 = ((ap_predicate_op136_write_state22 == 1'b1) & (data2_req_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((data2_req_full_n == 1'b0) & (exitcond3_fu_286_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state6 = (((data1_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)) | ((data0_rsp_empty_n == 1'b0) & (exitcond1_fu_351_p2 == 1'd0)));
end

assign ap_phi_mux_r_phi_fu_215_p4 = r_reg_211;

always @ (*) begin
    ap_predicate_op136_write_state22 = ((r_reg_211 == 1'd1) & (exitcond_fu_461_p2 == 1'd0));
end

assign data0_address = tmp_2_fu_324_p1;

assign data0_dataout = 32'd0;

assign data0_req_din = 1'b0;

assign data0_size = dim;

assign data1_address = data1_addr_reg_546;

assign data1_dataout = 32'd0;

assign data1_req_din = 1'b0;

assign data1_size = dim;

assign data2_load_to_int_fu_410_p1 = data2_addr_2_read_reg_634;

assign exitcond1_fu_351_p2 = ((l_reg_189 == dim) ? 1'b1 : 1'b0);

assign exitcond2_fu_313_p2 = ((k_1_reg_166 == dim) ? 1'b1 : 1'b0);

assign exitcond3_fu_286_p2 = ((k_reg_155 == dim) ? 1'b1 : 1'b0);

assign exitcond4_fu_265_p2 = ((i_reg_132 == size) ? 1'b1 : 1'b0);

assign exitcond_fu_461_p2 = ((l_2_reg_223 == dim) ? 1'b1 : 1'b0);

assign i_1_fu_270_p2 = (i_reg_132 + 32'd1);

assign is_0iter5_fu_472_p2 = ((l_2_reg_223 == 32'd0) ? 1'b1 : 1'b0);

assign is_0iter_fu_297_p2 = ((k_reg_155 == 32'd0) ? 1'b1 : 1'b0);

assign k_2_fu_291_p2 = (k_reg_155 + 32'd1);

assign k_3_fu_318_p2 = (k_1_reg_166 + 32'd1);

assign l_3_fu_373_p2 = (l_1_reg_200 + 32'd1);

assign l_4_fu_356_p2 = (l_reg_189 + 32'd1);

assign l_5_fu_466_p2 = (l_2_reg_223 + 32'd1);

assign next_mul2_fu_260_p2 = (phi_mul1_reg_143 + dim);

assign next_mul_fu_308_p2 = (phi_mul_reg_178 + dim);

assign notlhs1_fu_394_p2 = ((tmp_10_fu_385_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_427_p2 = ((tmp_3_fu_413_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs2_fu_254_p2 = ((tmp_fu_250_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_433_p2 = ((tmp_4_fu_423_p1 == 23'd0) ? 1'b1 : 1'b0);

assign threshold_to_int_fu_246_p1 = threshold;

assign tmp_10_fu_385_p4 = {{threshold_to_int_reg_502[30:23]}};

assign tmp_11_fu_439_p2 = (notrhs_fu_433_p2 | notlhs_fu_427_p2);

assign tmp_12_fu_445_p2 = (notrhs2_reg_507 | notlhs1_reg_623);

assign tmp_13_fu_449_p2 = (tmp_12_fu_445_p2 & tmp_11_fu_439_p2);

assign tmp_17_fu_455_p2 = (tmp_16_fu_242_p2 & tmp_13_fu_449_p2);

assign tmp_1_fu_276_p1 = phi_mul1_reg_143;

assign tmp_2_fu_324_p1 = phi_mul_reg_178;

assign tmp_3_fu_413_p4 = {{data2_load_to_int_fu_410_p1[30:23]}};

assign tmp_4_fu_423_p1 = data2_load_to_int_fu_410_p1[22:0];

assign tmp_5_fu_335_p2 = (k_1_reg_166 + phi_mul1_reg_143);

assign tmp_6_fu_341_p1 = tmp_5_fu_335_p2;

assign tmp_7_fu_362_p2 = ((l_1_reg_200 < dim) ? 1'b1 : 1'b0);

assign tmp_8_fu_367_p2 = (tmp_7_fu_362_p2 & r_reg_211);

assign tmp_9_fu_379_p2 = (l_1_reg_200 + phi_mul1_reg_143);

assign tmp_fu_250_p1 = threshold_to_int_fu_246_p1[22:0];

assign tmp_s_fu_400_p1 = tmp_9_reg_618;

always @ (posedge ap_clk) begin
    tmp_1_reg_525[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //myFuncAccel
