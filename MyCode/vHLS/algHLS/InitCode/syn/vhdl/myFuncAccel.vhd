-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myFuncAccel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    dim : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_req_din : OUT STD_LOGIC;
    data0_req_full_n : IN STD_LOGIC;
    data0_req_write : OUT STD_LOGIC;
    data0_rsp_empty_n : IN STD_LOGIC;
    data0_rsp_read : OUT STD_LOGIC;
    data0_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data0_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data0_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_req_din : OUT STD_LOGIC;
    data1_req_full_n : IN STD_LOGIC;
    data1_req_write : OUT STD_LOGIC;
    data1_rsp_empty_n : IN STD_LOGIC;
    data1_rsp_read : OUT STD_LOGIC;
    data1_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data1_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_req_din : OUT STD_LOGIC;
    data2_req_full_n : IN STD_LOGIC;
    data2_req_write : OUT STD_LOGIC;
    data2_rsp_empty_n : IN STD_LOGIC;
    data2_rsp_read : OUT STD_LOGIC;
    data2_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    data2_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    data2_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myFuncAccel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myFuncAccel,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=215001,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=805,HLS_SYN_LUT=1386,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_42C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110010000000000000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_430 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_268_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_435 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal data2_addr_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_fu_292_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal data1_addr_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_cast4_fu_309_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_1_cast4_reg_468 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_3_fu_319_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_3_reg_476 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_addr_1_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal l_3_fu_368_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_3_reg_496 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_5_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal data0_addr_read_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_addr_read_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal data2_addr_1_read_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal l_4_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_4_reg_529 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_17_fu_390_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_reg_537 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal data2_addr_2_read_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal r_1_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal l_5_fu_415_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_20_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op141_write_state23 : BOOLEAN;
    signal ap_block_state23 : BOOLEAN;
    signal i_reg_147 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_158 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_169 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal l_1_reg_191 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal r_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_be_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_2_reg_226 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal is_0iter_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_0iter3_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_13_fu_325_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_329_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_348_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal l_1_cast2_fu_374_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_241_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myFuncAccel_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1 : component myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data2_addr_1_read_reg_516,
        din1 => tmp_15_reg_511,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2 : component myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data0_addr_read_reg_501,
        din1 => data1_addr_read_reg_506,
        ce => grp_fu_241_ce,
        dout => grp_fu_241_p2);

    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3 : component myFuncAccel_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => data2_addr_2_read_reg_552,
        din1 => ap_const_lv32_42C80000,
        opcode => ap_const_lv5_2,
        dout => tmp_19_fu_245_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23) and ((tmp_20_fu_409_p2 = ap_const_lv1_1) or (tmp_10_reg_542 = ap_const_lv1_1)))) then 
                i_reg_147 <= i_1_reg_430;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_147 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_1_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_286_p2 = ap_const_lv1_1))) then 
                k_1_reg_169 <= ap_const_lv3_0;
            elsif ((not((((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data1_rsp_empty_n = ap_const_logic_0)) or ((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data0_rsp_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_5_fu_362_p2 = ap_const_lv1_1))) then 
                k_1_reg_169 <= k_3_reg_476;
            end if; 
        end if;
    end process;

    k_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (tmp_2_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_158 <= k_2_fu_292_p2;
            elsif (((tmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_158 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    l_1_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                l_1_reg_191 <= l_4_reg_529;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_6_fu_313_p2 = ap_const_lv1_1))) then 
                l_1_reg_191 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    l_2_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_s_fu_378_p2 = ap_const_lv1_1))) then 
                l_2_reg_226 <= ap_const_lv3_0;
            elsif ((not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (tmp_20_fu_409_p2 = ap_const_lv1_0) and (tmp_10_reg_542 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                l_2_reg_226 <= l_5_fu_415_p2;
            end if; 
        end if;
    end process;

    l_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                l_reg_180 <= l_3_reg_496;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                l_reg_180 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_be_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17) and (grp_fu_250_p2 = ap_const_lv1_1))) then 
                r_be_reg_214 <= r_reg_202;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                r_be_reg_214 <= r_1_fu_405_p1;
            end if; 
        end if;
    end process;

    r_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                r_reg_202 <= r_be_reg_214;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_6_fu_313_p2 = ap_const_lv1_1))) then 
                r_reg_202 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data1_rsp_empty_n = ap_const_logic_0)) or ((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data0_rsp_empty_n = ap_const_logic_0)))) and (tmp_5_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                data0_addr_read_reg_501 <= data0_datain;
                data1_addr_read_reg_506 <= data1_datain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_286_p2 = ap_const_lv1_1))) then
                    data1_addr_reg_462(11 downto 2) <= tmp_4_reg_441(32 - 1 downto 0)(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data2_rsp_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                data2_addr_1_read_reg_516 <= data2_datain;
                tmp_15_reg_511 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    data2_addr_1_reg_487(11 downto 0) <= tmp_9_fu_352_p1(32 - 1 downto 0)(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data2_rsp_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                data2_addr_2_read_reg_552 <= data2_datain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    data2_addr_reg_446(11 downto 2) <= tmp_4_fu_276_p1(32 - 1 downto 0)(11 downto 2);
                    tmp_1_reg_435(11 downto 2) <= tmp_1_fu_268_p3(11 downto 2);
                    tmp_4_reg_441(11 downto 2) <= tmp_4_fu_276_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_430 <= i_1_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    k_1_cast4_reg_468(2 downto 0) <= k_1_cast4_fu_309_p1(2 downto 0);
                k_3_reg_476 <= k_3_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data1_rsp_empty_n = ap_const_logic_0)) or ((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data0_rsp_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                l_3_reg_496 <= l_3_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                l_4_reg_529 <= l_4_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_s_fu_378_p2 = ap_const_lv1_1))) then
                tmp_10_reg_542 <= grp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_16_reg_521 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_250_p2 = ap_const_lv1_0) and (tmp_s_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_17_reg_537 <= tmp_17_fu_390_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_435(1 downto 0) <= "00";
    tmp_4_reg_441(1 downto 0) <= "00";
    tmp_4_reg_441(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    data2_addr_reg_446(1 downto 0) <= "00";
    data2_addr_reg_446(31 downto 12) <= "00000000000000000000";
    data1_addr_reg_462(1 downto 0) <= "00";
    data1_addr_reg_462(31 downto 12) <= "00000000000000000000";
    k_1_cast4_reg_468(11 downto 3) <= "000000000";
    data2_addr_1_reg_487(31 downto 12) <= "00000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data0_rsp_empty_n, data1_rsp_empty_n, data2_req_full_n, data2_rsp_empty_n, ap_CS_fsm_state2, tmp_fu_256_p2, ap_CS_fsm_state3, tmp_2_fu_286_p2, ap_CS_fsm_state4, tmp_6_fu_313_p2, ap_CS_fsm_state6, tmp_5_fu_362_p2, ap_CS_fsm_state10, ap_CS_fsm_state17, tmp_s_fu_378_p2, grp_fu_250_p2, tmp_10_reg_542, ap_CS_fsm_state20, ap_CS_fsm_state23, tmp_20_fu_409_p2, ap_predicate_op141_write_state23, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_286_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (tmp_2_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_6_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if ((not((((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data1_rsp_empty_n = ap_const_logic_0)) or ((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data0_rsp_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_5_fu_362_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not((((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data1_rsp_empty_n = ap_const_logic_0)) or ((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data0_rsp_empty_n = ap_const_logic_0)))) and (tmp_5_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((data2_rsp_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_s_fu_378_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((tmp_s_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17) and (grp_fu_250_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((data2_rsp_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state23 => 
                if ((not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23) and ((tmp_20_fu_409_p2 = ap_const_lv1_1) or (tmp_10_reg_542 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (tmp_20_fu_409_p2 = ap_const_lv1_0) and (tmp_10_reg_542 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state23_assign_proc : process(data2_req_full_n, ap_predicate_op141_write_state23)
    begin
                ap_block_state23 <= ((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(data2_req_full_n, tmp_2_fu_286_p2)
    begin
                ap_block_state3 <= ((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n, tmp_5_fu_362_p2)
    begin
                ap_block_state6 <= (((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data1_rsp_empty_n = ap_const_logic_0)) or ((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data0_rsp_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_256_p2)
    begin
        if (((tmp_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op141_write_state23_assign_proc : process(tmp_10_reg_542, tmp_20_fu_409_p2)
    begin
                ap_predicate_op141_write_state23 <= ((tmp_20_fu_409_p2 = ap_const_lv1_0) and (tmp_10_reg_542 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_256_p2)
    begin
        if (((tmp_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data0_address <= tmp_14_fu_337_p1(32 - 1 downto 0);
    data0_dataout <= ap_const_lv32_0;
    data0_req_din <= ap_const_logic_0;

    data0_req_write_assign_proc : process(ap_CS_fsm_state4, tmp_6_fu_313_p2)
    begin
        if (((tmp_6_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data0_req_write <= ap_const_logic_1;
        else 
            data0_req_write <= ap_const_logic_0;
        end if; 
    end process;


    data0_rsp_read_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n, ap_CS_fsm_state6, tmp_5_fu_362_p2)
    begin
        if ((not((((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data1_rsp_empty_n = ap_const_logic_0)) or ((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data0_rsp_empty_n = ap_const_logic_0)))) and (tmp_5_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data0_rsp_read <= ap_const_logic_1;
        else 
            data0_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    data0_size <= ap_const_lv32_4;
    data1_address <= data1_addr_reg_462;
    data1_dataout <= ap_const_lv32_0;
    data1_req_din <= ap_const_logic_0;

    data1_req_write_assign_proc : process(ap_CS_fsm_state4, tmp_6_fu_313_p2)
    begin
        if (((tmp_6_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data1_req_write <= ap_const_logic_1;
        else 
            data1_req_write <= ap_const_logic_0;
        end if; 
    end process;


    data1_rsp_read_assign_proc : process(data0_rsp_empty_n, data1_rsp_empty_n, ap_CS_fsm_state6, tmp_5_fu_362_p2)
    begin
        if ((not((((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data1_rsp_empty_n = ap_const_logic_0)) or ((tmp_5_fu_362_p2 = ap_const_lv1_0) and (data0_rsp_empty_n = ap_const_logic_0)))) and (tmp_5_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data1_rsp_read <= ap_const_logic_1;
        else 
            data1_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    data1_size <= ap_const_lv32_4;

    data2_address_assign_proc : process(data2_req_full_n, data2_addr_reg_446, ap_CS_fsm_state3, tmp_2_fu_286_p2, data2_addr_1_reg_487, tmp_10_reg_542, ap_CS_fsm_state18, ap_CS_fsm_state23, tmp_20_fu_409_p2, ap_predicate_op141_write_state23, ap_CS_fsm_state16, tmp_18_fu_395_p1, is_0iter_fu_298_p2, is_0iter3_fu_421_p2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            data2_address <= tmp_18_fu_395_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            data2_address <= data2_addr_1_reg_487;
        elsif (((not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (tmp_20_fu_409_p2 = ap_const_lv1_0) and (tmp_10_reg_542 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23) and (is_0iter3_fu_421_p2 = ap_const_lv1_1)) or (not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (tmp_2_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (is_0iter_fu_298_p2 = ap_const_lv1_1)))) then 
            data2_address <= data2_addr_reg_446;
        else 
            data2_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data2_dataout_assign_proc : process(data2_req_full_n, ap_CS_fsm_state3, tmp_2_fu_286_p2, tmp_16_reg_521, ap_CS_fsm_state23, ap_predicate_op141_write_state23, ap_CS_fsm_state16)
    begin
        if (((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            data2_dataout <= tmp_16_reg_521;
        elsif (((not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (ap_predicate_op141_write_state23 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (tmp_2_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data2_dataout <= ap_const_lv32_0;
        else 
            data2_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data2_req_din_assign_proc : process(data2_req_full_n, ap_CS_fsm_state3, tmp_2_fu_286_p2, tmp_10_reg_542, ap_CS_fsm_state18, ap_CS_fsm_state23, tmp_20_fu_409_p2, ap_predicate_op141_write_state23, ap_CS_fsm_state16, is_0iter3_fu_421_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            data2_req_din <= ap_const_logic_0;
        elsif ((((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (ap_predicate_op141_write_state23 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (tmp_20_fu_409_p2 = ap_const_lv1_0) and (tmp_10_reg_542 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23) and (is_0iter3_fu_421_p2 = ap_const_lv1_1)) or (not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (tmp_2_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data2_req_din <= ap_const_logic_1;
        else 
            data2_req_din <= ap_const_logic_0;
        end if; 
    end process;


    data2_req_write_assign_proc : process(data2_req_full_n, ap_CS_fsm_state3, tmp_2_fu_286_p2, tmp_10_reg_542, ap_CS_fsm_state18, ap_CS_fsm_state23, tmp_20_fu_409_p2, ap_predicate_op141_write_state23, ap_CS_fsm_state16, is_0iter3_fu_421_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (ap_predicate_op141_write_state23 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (tmp_20_fu_409_p2 = ap_const_lv1_0) and (tmp_10_reg_542 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23) and (is_0iter3_fu_421_p2 = ap_const_lv1_1)) or (not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (tmp_2_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data2_req_write <= ap_const_logic_1;
        else 
            data2_req_write <= ap_const_logic_0;
        end if; 
    end process;


    data2_rsp_read_assign_proc : process(data2_rsp_empty_n, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((((data2_rsp_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((data2_rsp_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            data2_rsp_read <= ap_const_logic_1;
        else 
            data2_rsp_read <= ap_const_logic_0;
        end if; 
    end process;


    data2_size_assign_proc : process(data2_req_full_n, ap_CS_fsm_state3, tmp_2_fu_286_p2, tmp_10_reg_542, ap_CS_fsm_state18, ap_CS_fsm_state23, tmp_20_fu_409_p2, ap_predicate_op141_write_state23, ap_CS_fsm_state16, is_0iter_fu_298_p2, is_0iter3_fu_421_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((data2_req_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            data2_size <= ap_const_lv32_1;
        elsif (((not(((ap_predicate_op141_write_state23 = ap_const_boolean_1) and (data2_req_full_n = ap_const_logic_0))) and (tmp_20_fu_409_p2 = ap_const_lv1_0) and (tmp_10_reg_542 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23) and (is_0iter3_fu_421_p2 = ap_const_lv1_1)) or (not(((tmp_2_fu_286_p2 = ap_const_lv1_0) and (data2_req_full_n = ap_const_logic_0))) and (tmp_2_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (is_0iter_fu_298_p2 = ap_const_lv1_1)))) then 
            data2_size <= ap_const_lv32_4;
        else 
            data2_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_241_ce_assign_proc : process(data2_rsp_empty_n, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((data2_rsp_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            grp_fu_241_ce <= ap_const_logic_1;
        else 
            grp_fu_241_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_250_p2 <= "1" when (r_reg_202 = ap_const_lv32_0) else "0";
    i_1_fu_262_p2 <= std_logic_vector(unsigned(i_reg_147) + unsigned(ap_const_lv10_1));
    is_0iter3_fu_421_p2 <= "1" when (l_2_reg_226 = ap_const_lv3_0) else "0";
    is_0iter_fu_298_p2 <= "1" when (k_reg_158 = ap_const_lv3_0) else "0";
    k_1_cast4_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_169),12));
    k_2_fu_292_p2 <= std_logic_vector(unsigned(k_reg_158) + unsigned(ap_const_lv3_1));
    k_3_fu_319_p2 <= std_logic_vector(unsigned(k_1_reg_169) + unsigned(ap_const_lv3_1));
    l_1_cast2_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_1_reg_191),12));
    l_3_fu_368_p2 <= std_logic_vector(unsigned(l_reg_180) + unsigned(ap_const_lv3_1));
    l_4_fu_384_p2 <= std_logic_vector(unsigned(l_1_reg_191) + unsigned(ap_const_lv3_1));
    l_5_fu_415_p2 <= std_logic_vector(unsigned(l_2_reg_226) + unsigned(ap_const_lv3_1));
    r_1_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_245_p2),32));
    tmp_13_fu_325_p1 <= k_1_reg_169(2 - 1 downto 0);
    tmp_14_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_329_p3),64));
    tmp_17_fu_390_p2 <= std_logic_vector(unsigned(l_1_cast2_fu_374_p1) + unsigned(tmp_1_reg_435));
    tmp_18_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_537),64));
    tmp_1_fu_268_p3 <= (i_reg_147 & ap_const_lv2_0);
    tmp_20_fu_409_p2 <= "1" when (l_2_reg_226 = ap_const_lv3_4) else "0";
    tmp_2_fu_286_p2 <= "1" when (k_reg_158 = ap_const_lv3_4) else "0";
    tmp_4_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_268_p3),64));
    tmp_5_fu_362_p2 <= "1" when (l_reg_180 = ap_const_lv3_4) else "0";
    tmp_6_fu_313_p2 <= "1" when (k_1_reg_169 = ap_const_lv3_4) else "0";
    tmp_7_fu_329_p3 <= (tmp_13_fu_325_p1 & ap_const_lv2_0);
    tmp_8_fu_348_p2 <= std_logic_vector(unsigned(tmp_1_reg_435) + unsigned(k_1_cast4_reg_468));
    tmp_9_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_348_p2),64));
    tmp_fu_256_p2 <= "1" when (i_reg_147 = ap_const_lv10_3E8) else "0";
    tmp_s_fu_378_p2 <= "1" when (l_1_reg_191 = ap_const_lv3_4) else "0";
end behav;
