// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myFuncAccel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myFuncAccel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myFuncAccel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<23> myFuncAccel::ap_ST_fsm_state1 = "1";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state2 = "10";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state3 = "100";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state4 = "1000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state5 = "10000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state6 = "100000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state7 = "1000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state8 = "10000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state9 = "100000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<23> myFuncAccel::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<32> myFuncAccel::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool myFuncAccel::ap_const_boolean_1 = true;
const sc_lv<32> myFuncAccel::ap_const_lv32_1 = "1";
const sc_lv<1> myFuncAccel::ap_const_lv1_0 = "0";
const sc_lv<32> myFuncAccel::ap_const_lv32_2 = "10";
const sc_lv<1> myFuncAccel::ap_const_lv1_1 = "1";
const sc_lv<32> myFuncAccel::ap_const_lv32_3 = "11";
const sc_lv<32> myFuncAccel::ap_const_lv32_4 = "100";
const sc_lv<32> myFuncAccel::ap_const_lv32_5 = "101";
const sc_lv<32> myFuncAccel::ap_const_lv32_9 = "1001";
const sc_lv<32> myFuncAccel::ap_const_lv32_E = "1110";
const sc_lv<32> myFuncAccel::ap_const_lv32_10 = "10000";
const sc_lv<32> myFuncAccel::ap_const_lv32_11 = "10001";
const sc_lv<32> myFuncAccel::ap_const_lv32_13 = "10011";
const sc_lv<32> myFuncAccel::ap_const_lv32_14 = "10100";
const sc_lv<32> myFuncAccel::ap_const_lv32_16 = "10110";
const sc_lv<10> myFuncAccel::ap_const_lv10_0 = "0000000000";
const sc_lv<3> myFuncAccel::ap_const_lv3_0 = "000";
const sc_lv<32> myFuncAccel::ap_const_lv32_F = "1111";
const sc_lv<32> myFuncAccel::ap_const_lv32_15 = "10101";
const sc_lv<32> myFuncAccel::ap_const_lv32_7 = "111";
const sc_lv<32> myFuncAccel::ap_const_lv32_A = "1010";
const sc_lv<32> myFuncAccel::ap_const_lv32_6 = "110";
const sc_lv<32> myFuncAccel::ap_const_lv32_42C80000 = "1000010110010000000000000000000";
const sc_lv<10> myFuncAccel::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> myFuncAccel::ap_const_lv10_1 = "1";
const sc_lv<2> myFuncAccel::ap_const_lv2_0 = "00";
const sc_lv<3> myFuncAccel::ap_const_lv3_4 = "100";
const sc_lv<3> myFuncAccel::ap_const_lv3_1 = "1";
const sc_lv<32> myFuncAccel::ap_const_lv32_8 = "1000";
const sc_lv<5> myFuncAccel::ap_const_lv5_2 = "10";

myFuncAccel::myFuncAccel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1 = new myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>("myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1");
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->clk(ap_clk);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->reset(ap_rst);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->din0(data2_addr_1_read_reg_516);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->din1(tmp_15_reg_511);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->ce(ap_var_for_const0);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->dout(grp_fu_237_p2);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2 = new myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>("myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2");
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->clk(ap_clk);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->reset(ap_rst);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->din0(data0_addr_read_reg_501);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->din1(data1_addr_read_reg_506);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->ce(grp_fu_241_ce);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->dout(grp_fu_241_p2);
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3 = new myFuncAccel_fcmp_32ns_32ns_1_1_1<1,1,32,32,1>("myFuncAccel_fcmp_32ns_32ns_1_1_1_U3");
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3->din0(data2_addr_2_read_reg_552);
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3->din1(ap_var_for_const1);
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3->opcode(ap_var_for_const2);
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3->dout(tmp_19_fu_245_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state23);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_predicate_op141_write_state23 );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( data2_req_full_n );
    sensitive << ( tmp_2_fu_286_p2 );

    SC_METHOD(thread_ap_block_state6);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( tmp_5_fu_362_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_256_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op141_write_state23);
    sensitive << ( tmp_10_reg_542 );
    sensitive << ( tmp_20_fu_409_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_256_p2 );

    SC_METHOD(thread_data0_address);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );
    sensitive << ( tmp_14_fu_337_p1 );

    SC_METHOD(thread_data0_dataout);

    SC_METHOD(thread_data0_req_din);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );

    SC_METHOD(thread_data0_req_write);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );

    SC_METHOD(thread_data0_rsp_read);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_fu_362_p2 );

    SC_METHOD(thread_data0_size);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );

    SC_METHOD(thread_data1_address);
    sensitive << ( data1_addr_reg_462 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );

    SC_METHOD(thread_data1_dataout);

    SC_METHOD(thread_data1_req_din);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );

    SC_METHOD(thread_data1_req_write);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );

    SC_METHOD(thread_data1_rsp_read);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_fu_362_p2 );

    SC_METHOD(thread_data1_size);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );

    SC_METHOD(thread_data2_address);
    sensitive << ( data2_req_full_n );
    sensitive << ( data2_addr_reg_446 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_286_p2 );
    sensitive << ( data2_addr_1_reg_487 );
    sensitive << ( tmp_10_reg_542 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_20_fu_409_p2 );
    sensitive << ( ap_predicate_op141_write_state23 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_18_fu_395_p1 );
    sensitive << ( is_0iter_fu_298_p2 );
    sensitive << ( is_0iter3_fu_421_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_data2_dataout);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_286_p2 );
    sensitive << ( tmp_16_reg_521 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_predicate_op141_write_state23 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_data2_req_din);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_286_p2 );
    sensitive << ( tmp_10_reg_542 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_20_fu_409_p2 );
    sensitive << ( ap_predicate_op141_write_state23 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( is_0iter3_fu_421_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_data2_req_write);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_286_p2 );
    sensitive << ( tmp_10_reg_542 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_20_fu_409_p2 );
    sensitive << ( ap_predicate_op141_write_state23 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( is_0iter3_fu_421_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_data2_rsp_read);
    sensitive << ( data2_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_data2_size);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_286_p2 );
    sensitive << ( tmp_10_reg_542 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_20_fu_409_p2 );
    sensitive << ( ap_predicate_op141_write_state23 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( is_0iter_fu_298_p2 );
    sensitive << ( is_0iter3_fu_421_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_fu_241_ce);
    sensitive << ( data2_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_grp_fu_250_p2);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( tmp_s_fu_378_p2 );
    sensitive << ( r_reg_202 );

    SC_METHOD(thread_i_1_fu_262_p2);
    sensitive << ( i_reg_147 );

    SC_METHOD(thread_is_0iter3_fu_421_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( tmp_10_reg_542 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_20_fu_409_p2 );
    sensitive << ( ap_predicate_op141_write_state23 );
    sensitive << ( l_2_reg_226 );

    SC_METHOD(thread_is_0iter_fu_298_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_286_p2 );
    sensitive << ( k_reg_158 );

    SC_METHOD(thread_k_1_cast4_fu_309_p1);
    sensitive << ( k_1_reg_169 );

    SC_METHOD(thread_k_2_fu_292_p2);
    sensitive << ( k_reg_158 );

    SC_METHOD(thread_k_3_fu_319_p2);
    sensitive << ( k_1_reg_169 );

    SC_METHOD(thread_l_1_cast2_fu_374_p1);
    sensitive << ( l_1_reg_191 );

    SC_METHOD(thread_l_3_fu_368_p2);
    sensitive << ( l_reg_180 );

    SC_METHOD(thread_l_4_fu_384_p2);
    sensitive << ( l_1_reg_191 );

    SC_METHOD(thread_l_5_fu_415_p2);
    sensitive << ( l_2_reg_226 );

    SC_METHOD(thread_r_1_fu_405_p1);
    sensitive << ( tmp_19_fu_245_p2 );

    SC_METHOD(thread_tmp_13_fu_325_p1);
    sensitive << ( k_1_reg_169 );

    SC_METHOD(thread_tmp_14_fu_337_p1);
    sensitive << ( tmp_7_fu_329_p3 );

    SC_METHOD(thread_tmp_17_fu_390_p2);
    sensitive << ( tmp_1_reg_435 );
    sensitive << ( l_1_cast2_fu_374_p1 );

    SC_METHOD(thread_tmp_18_fu_395_p1);
    sensitive << ( tmp_17_reg_537 );

    SC_METHOD(thread_tmp_1_fu_268_p3);
    sensitive << ( i_reg_147 );

    SC_METHOD(thread_tmp_20_fu_409_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( tmp_10_reg_542 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_predicate_op141_write_state23 );
    sensitive << ( l_2_reg_226 );

    SC_METHOD(thread_tmp_2_fu_286_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_286_p2 );
    sensitive << ( k_reg_158 );

    SC_METHOD(thread_tmp_4_fu_276_p1);
    sensitive << ( tmp_1_fu_268_p3 );

    SC_METHOD(thread_tmp_5_fu_362_p2);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_fu_362_p2 );
    sensitive << ( l_reg_180 );

    SC_METHOD(thread_tmp_6_fu_313_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_1_reg_169 );

    SC_METHOD(thread_tmp_7_fu_329_p3);
    sensitive << ( tmp_13_fu_325_p1 );

    SC_METHOD(thread_tmp_8_fu_348_p2);
    sensitive << ( tmp_1_reg_435 );
    sensitive << ( k_1_cast4_reg_468 );

    SC_METHOD(thread_tmp_9_fu_352_p1);
    sensitive << ( tmp_8_fu_348_p2 );

    SC_METHOD(thread_tmp_fu_256_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_147 );

    SC_METHOD(thread_tmp_s_fu_378_p2);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( l_1_reg_191 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( data2_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_256_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_286_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_313_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_fu_362_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( tmp_s_fu_378_p2 );
    sensitive << ( grp_fu_250_p2 );
    sensitive << ( tmp_10_reg_542 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_20_fu_409_p2 );
    sensitive << ( ap_predicate_op141_write_state23 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "00000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myFuncAccel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, size, "(port)size");
    sc_trace(mVcdFile, dim, "(port)dim");
    sc_trace(mVcdFile, threshold, "(port)threshold");
    sc_trace(mVcdFile, data0_req_din, "(port)data0_req_din");
    sc_trace(mVcdFile, data0_req_full_n, "(port)data0_req_full_n");
    sc_trace(mVcdFile, data0_req_write, "(port)data0_req_write");
    sc_trace(mVcdFile, data0_rsp_empty_n, "(port)data0_rsp_empty_n");
    sc_trace(mVcdFile, data0_rsp_read, "(port)data0_rsp_read");
    sc_trace(mVcdFile, data0_address, "(port)data0_address");
    sc_trace(mVcdFile, data0_datain, "(port)data0_datain");
    sc_trace(mVcdFile, data0_dataout, "(port)data0_dataout");
    sc_trace(mVcdFile, data0_size, "(port)data0_size");
    sc_trace(mVcdFile, data1_req_din, "(port)data1_req_din");
    sc_trace(mVcdFile, data1_req_full_n, "(port)data1_req_full_n");
    sc_trace(mVcdFile, data1_req_write, "(port)data1_req_write");
    sc_trace(mVcdFile, data1_rsp_empty_n, "(port)data1_rsp_empty_n");
    sc_trace(mVcdFile, data1_rsp_read, "(port)data1_rsp_read");
    sc_trace(mVcdFile, data1_address, "(port)data1_address");
    sc_trace(mVcdFile, data1_datain, "(port)data1_datain");
    sc_trace(mVcdFile, data1_dataout, "(port)data1_dataout");
    sc_trace(mVcdFile, data1_size, "(port)data1_size");
    sc_trace(mVcdFile, data2_req_din, "(port)data2_req_din");
    sc_trace(mVcdFile, data2_req_full_n, "(port)data2_req_full_n");
    sc_trace(mVcdFile, data2_req_write, "(port)data2_req_write");
    sc_trace(mVcdFile, data2_rsp_empty_n, "(port)data2_rsp_empty_n");
    sc_trace(mVcdFile, data2_rsp_read, "(port)data2_rsp_read");
    sc_trace(mVcdFile, data2_address, "(port)data2_address");
    sc_trace(mVcdFile, data2_datain, "(port)data2_datain");
    sc_trace(mVcdFile, data2_dataout, "(port)data2_dataout");
    sc_trace(mVcdFile, data2_size, "(port)data2_size");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_262_p2, "i_1_fu_262_p2");
    sc_trace(mVcdFile, i_1_reg_430, "i_1_reg_430");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_268_p3, "tmp_1_fu_268_p3");
    sc_trace(mVcdFile, tmp_1_reg_435, "tmp_1_reg_435");
    sc_trace(mVcdFile, tmp_fu_256_p2, "tmp_fu_256_p2");
    sc_trace(mVcdFile, tmp_4_fu_276_p1, "tmp_4_fu_276_p1");
    sc_trace(mVcdFile, tmp_4_reg_441, "tmp_4_reg_441");
    sc_trace(mVcdFile, data2_addr_reg_446, "data2_addr_reg_446");
    sc_trace(mVcdFile, k_2_fu_292_p2, "k_2_fu_292_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_fu_286_p2, "tmp_2_fu_286_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, data1_addr_reg_462, "data1_addr_reg_462");
    sc_trace(mVcdFile, k_1_cast4_fu_309_p1, "k_1_cast4_fu_309_p1");
    sc_trace(mVcdFile, k_1_cast4_reg_468, "k_1_cast4_reg_468");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, k_3_fu_319_p2, "k_3_fu_319_p2");
    sc_trace(mVcdFile, k_3_reg_476, "k_3_reg_476");
    sc_trace(mVcdFile, tmp_6_fu_313_p2, "tmp_6_fu_313_p2");
    sc_trace(mVcdFile, data2_addr_1_reg_487, "data2_addr_1_reg_487");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, l_3_fu_368_p2, "l_3_fu_368_p2");
    sc_trace(mVcdFile, l_3_reg_496, "l_3_reg_496");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_5_fu_362_p2, "tmp_5_fu_362_p2");
    sc_trace(mVcdFile, ap_block_state6, "ap_block_state6");
    sc_trace(mVcdFile, data0_addr_read_reg_501, "data0_addr_read_reg_501");
    sc_trace(mVcdFile, data1_addr_read_reg_506, "data1_addr_read_reg_506");
    sc_trace(mVcdFile, grp_fu_241_p2, "grp_fu_241_p2");
    sc_trace(mVcdFile, tmp_15_reg_511, "tmp_15_reg_511");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, data2_addr_1_read_reg_516, "data2_addr_1_read_reg_516");
    sc_trace(mVcdFile, grp_fu_237_p2, "grp_fu_237_p2");
    sc_trace(mVcdFile, tmp_16_reg_521, "tmp_16_reg_521");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, l_4_fu_384_p2, "l_4_fu_384_p2");
    sc_trace(mVcdFile, l_4_reg_529, "l_4_reg_529");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, tmp_17_fu_390_p2, "tmp_17_fu_390_p2");
    sc_trace(mVcdFile, tmp_17_reg_537, "tmp_17_reg_537");
    sc_trace(mVcdFile, tmp_s_fu_378_p2, "tmp_s_fu_378_p2");
    sc_trace(mVcdFile, grp_fu_250_p2, "grp_fu_250_p2");
    sc_trace(mVcdFile, tmp_10_reg_542, "tmp_10_reg_542");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, data2_addr_2_read_reg_552, "data2_addr_2_read_reg_552");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, r_1_fu_405_p1, "r_1_fu_405_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, l_5_fu_415_p2, "l_5_fu_415_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_20_fu_409_p2, "tmp_20_fu_409_p2");
    sc_trace(mVcdFile, ap_predicate_op141_write_state23, "ap_predicate_op141_write_state23");
    sc_trace(mVcdFile, ap_block_state23, "ap_block_state23");
    sc_trace(mVcdFile, i_reg_147, "i_reg_147");
    sc_trace(mVcdFile, k_reg_158, "k_reg_158");
    sc_trace(mVcdFile, k_1_reg_169, "k_1_reg_169");
    sc_trace(mVcdFile, l_reg_180, "l_reg_180");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, l_1_reg_191, "l_1_reg_191");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, r_reg_202, "r_reg_202");
    sc_trace(mVcdFile, r_be_reg_214, "r_be_reg_214");
    sc_trace(mVcdFile, l_2_reg_226, "l_2_reg_226");
    sc_trace(mVcdFile, tmp_14_fu_337_p1, "tmp_14_fu_337_p1");
    sc_trace(mVcdFile, tmp_9_fu_352_p1, "tmp_9_fu_352_p1");
    sc_trace(mVcdFile, tmp_18_fu_395_p1, "tmp_18_fu_395_p1");
    sc_trace(mVcdFile, is_0iter_fu_298_p2, "is_0iter_fu_298_p2");
    sc_trace(mVcdFile, is_0iter3_fu_421_p2, "is_0iter3_fu_421_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_13_fu_325_p1, "tmp_13_fu_325_p1");
    sc_trace(mVcdFile, tmp_7_fu_329_p3, "tmp_7_fu_329_p3");
    sc_trace(mVcdFile, tmp_8_fu_348_p2, "tmp_8_fu_348_p2");
    sc_trace(mVcdFile, l_1_cast2_fu_374_p1, "l_1_cast2_fu_374_p1");
    sc_trace(mVcdFile, tmp_19_fu_245_p2, "tmp_19_fu_245_p2");
    sc_trace(mVcdFile, grp_fu_241_ce, "grp_fu_241_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("myFuncAccel.hdltvin.dat");
    mHdltvoutHandle.open("myFuncAccel.hdltvout.dat");
}

myFuncAccel::~myFuncAccel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1;
    delete myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2;
    delete myFuncAccel_fcmp_32ns_32ns_1_1_1_U3;
}

void myFuncAccel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void myFuncAccel::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_42C80000;
}

void myFuncAccel::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void myFuncAccel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read())) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_20_fu_409_p2.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_reg_542.read())))) {
        i_reg_147 = i_1_reg_430.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_147 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read())) && 
         esl_seteq<1,1,1>(tmp_2_fu_286_p2.read(), ap_const_lv1_1))) {
        k_1_reg_169 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                !((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_362_p2.read()))) {
        k_1_reg_169 = k_3_reg_476.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read())))) {
        k_reg_158 = k_2_fu_292_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_256_p2.read(), ap_const_lv1_0))) {
        k_reg_158 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        l_1_reg_191 = l_4_reg_529.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_313_p2.read()))) {
        l_1_reg_191 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_250_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_378_p2.read()))) {
        l_2_reg_226 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_reg_542.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_20_fu_409_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read())))) {
        l_2_reg_226 = l_5_fu_415_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1))) {
        l_reg_180 = l_3_reg_496.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        l_reg_180 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_378_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_250_p2.read()))) {
        r_be_reg_214 = r_reg_202.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        r_be_reg_214 = r_1_fu_405_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        r_reg_202 = r_be_reg_214.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_313_p2.read()))) {
        r_reg_202 = ap_const_lv32_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))))) {
        data0_addr_read_reg_501 = data0_datain.read();
        data1_addr_read_reg_506 = data1_datain.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read())) && esl_seteq<1,1,1>(tmp_2_fu_286_p2.read(), ap_const_lv1_1))) {
        data1_addr_reg_462 =  (sc_lv<32>) (tmp_4_reg_441.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(data2_rsp_empty_n.read(), ap_const_logic_1))) {
        data2_addr_1_read_reg_516 = data2_datain.read();
        tmp_15_reg_511 = grp_fu_241_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        data2_addr_1_reg_487 =  (sc_lv<32>) (tmp_9_fu_352_p1.read());
    }
    if ((esl_seteq<1,1,1>(data2_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        data2_addr_2_read_reg_552 = data2_datain.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_256_p2.read(), ap_const_lv1_0))) {
        data2_addr_reg_446 =  (sc_lv<32>) (tmp_4_fu_276_p1.read());
        tmp_1_reg_435 = tmp_1_fu_268_p3.read();
        tmp_4_reg_441 = tmp_4_fu_276_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_430 = i_1_fu_262_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_1_cast4_reg_468 = k_1_cast4_fu_309_p1.read();
        k_3_reg_476 = k_3_fu_319_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))))) {
        l_3_reg_496 = l_3_fu_368_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        l_4_reg_529 = l_4_fu_384_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_378_p2.read()))) {
        tmp_10_reg_542 = grp_fu_250_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        tmp_16_reg_521 = grp_fu_237_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_378_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_250_p2.read()))) {
        tmp_17_reg_537 = tmp_17_fu_390_p2.read();
    }
}

void myFuncAccel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void myFuncAccel::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void myFuncAccel::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void myFuncAccel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void myFuncAccel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void myFuncAccel::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void myFuncAccel::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void myFuncAccel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void myFuncAccel::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void myFuncAccel::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void myFuncAccel::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void myFuncAccel::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void myFuncAccel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void myFuncAccel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void myFuncAccel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void myFuncAccel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void myFuncAccel::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void myFuncAccel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void myFuncAccel::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void myFuncAccel::thread_ap_block_state23() {
    ap_block_state23 = (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read()));
}

void myFuncAccel::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()));
}

void myFuncAccel::thread_ap_block_state6() {
    ap_block_state6 = ((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())));
}

void myFuncAccel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_256_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void myFuncAccel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myFuncAccel::thread_ap_predicate_op141_write_state23() {
    ap_predicate_op141_write_state23 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_reg_542.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_20_fu_409_p2.read()));
}

void myFuncAccel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_256_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data0_address() {
    data0_address =  (sc_lv<32>) (tmp_14_fu_337_p1.read());
}

void myFuncAccel::thread_data0_dataout() {
    data0_dataout = ap_const_lv32_0;
}

void myFuncAccel::thread_data0_req_din() {
    data0_req_din = ap_const_logic_0;
}

void myFuncAccel::thread_data0_req_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_313_p2.read()))) {
        data0_req_write = ap_const_logic_1;
    } else {
        data0_req_write = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data0_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))))) {
        data0_rsp_read = ap_const_logic_1;
    } else {
        data0_rsp_read = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data0_size() {
    data0_size = ap_const_lv32_4;
}

void myFuncAccel::thread_data1_address() {
    data1_address = data1_addr_reg_462.read();
}

void myFuncAccel::thread_data1_dataout() {
    data1_dataout = ap_const_lv32_0;
}

void myFuncAccel::thread_data1_req_din() {
    data1_req_din = ap_const_logic_0;
}

void myFuncAccel::thread_data1_req_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_313_p2.read()))) {
        data1_req_write = ap_const_logic_1;
    } else {
        data1_req_write = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data1_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))))) {
        data1_rsp_read = ap_const_logic_1;
    } else {
        data1_rsp_read = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data1_size() {
    data1_size = ap_const_lv32_4;
}

void myFuncAccel::thread_data2_address() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        data2_address =  (sc_lv<32>) (tmp_18_fu_395_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                 esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1)) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        data2_address = data2_addr_1_reg_487.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read())) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter_fu_298_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_reg_542.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_20_fu_409_p2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read())) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter3_fu_421_p2.read())))) {
        data2_address = data2_addr_reg_446.read();
    } else {
        data2_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_data2_dataout() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1))) {
        data2_dataout = tmp_16_reg_521.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                 esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read()))))) {
        data2_dataout = ap_const_lv32_0;
    } else {
        data2_dataout = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_data2_req_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        data2_req_din = ap_const_logic_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                 esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_reg_542.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_20_fu_409_p2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read())) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter3_fu_421_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                 esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read()))))) {
        data2_req_din = ap_const_logic_1;
    } else {
        data2_req_din = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data2_req_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_reg_542.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_20_fu_409_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter3_fu_421_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        data2_req_write = ap_const_logic_1;
    } else {
        data2_req_write = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data2_rsp_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(data2_rsp_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(data2_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())))) {
        data2_rsp_read = ap_const_logic_1;
    } else {
        data2_rsp_read = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data2_size() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        data2_size = ap_const_lv32_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read())) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter_fu_298_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_reg_542.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_20_fu_409_p2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read())) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter3_fu_421_p2.read())))) {
        data2_size = ap_const_lv32_4;
    } else {
        data2_size = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_grp_fu_241_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(data2_rsp_empty_n.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        grp_fu_241_ce = ap_const_logic_1;
    } else {
        grp_fu_241_ce = ap_const_logic_0;
    }
}

void myFuncAccel::thread_grp_fu_250_p2() {
    grp_fu_250_p2 = (!r_reg_202.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(r_reg_202.read() == ap_const_lv32_0);
}

void myFuncAccel::thread_i_1_fu_262_p2() {
    i_1_fu_262_p2 = (!i_reg_147.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_147.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void myFuncAccel::thread_is_0iter3_fu_421_p2() {
    is_0iter3_fu_421_p2 = (!l_2_reg_226.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(l_2_reg_226.read() == ap_const_lv3_0);
}

void myFuncAccel::thread_is_0iter_fu_298_p2() {
    is_0iter_fu_298_p2 = (!k_reg_158.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_158.read() == ap_const_lv3_0);
}

void myFuncAccel::thread_k_1_cast4_fu_309_p1() {
    k_1_cast4_fu_309_p1 = esl_zext<12,3>(k_1_reg_169.read());
}

void myFuncAccel::thread_k_2_fu_292_p2() {
    k_2_fu_292_p2 = (!k_reg_158.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_reg_158.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void myFuncAccel::thread_k_3_fu_319_p2() {
    k_3_fu_319_p2 = (!k_1_reg_169.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_1_reg_169.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void myFuncAccel::thread_l_1_cast2_fu_374_p1() {
    l_1_cast2_fu_374_p1 = esl_zext<12,3>(l_1_reg_191.read());
}

void myFuncAccel::thread_l_3_fu_368_p2() {
    l_3_fu_368_p2 = (!l_reg_180.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(l_reg_180.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void myFuncAccel::thread_l_4_fu_384_p2() {
    l_4_fu_384_p2 = (!l_1_reg_191.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(l_1_reg_191.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void myFuncAccel::thread_l_5_fu_415_p2() {
    l_5_fu_415_p2 = (!l_2_reg_226.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(l_2_reg_226.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void myFuncAccel::thread_r_1_fu_405_p1() {
    r_1_fu_405_p1 = esl_zext<32,1>(tmp_19_fu_245_p2.read());
}

void myFuncAccel::thread_tmp_13_fu_325_p1() {
    tmp_13_fu_325_p1 = k_1_reg_169.read().range(2-1, 0);
}

void myFuncAccel::thread_tmp_14_fu_337_p1() {
    tmp_14_fu_337_p1 = esl_zext<64,4>(tmp_7_fu_329_p3.read());
}

void myFuncAccel::thread_tmp_17_fu_390_p2() {
    tmp_17_fu_390_p2 = (!l_1_cast2_fu_374_p1.read().is_01() || !tmp_1_reg_435.read().is_01())? sc_lv<12>(): (sc_biguint<12>(l_1_cast2_fu_374_p1.read()) + sc_biguint<12>(tmp_1_reg_435.read()));
}

void myFuncAccel::thread_tmp_18_fu_395_p1() {
    tmp_18_fu_395_p1 = esl_zext<64,12>(tmp_17_reg_537.read());
}

void myFuncAccel::thread_tmp_1_fu_268_p3() {
    tmp_1_fu_268_p3 = esl_concat<10,2>(i_reg_147.read(), ap_const_lv2_0);
}

void myFuncAccel::thread_tmp_20_fu_409_p2() {
    tmp_20_fu_409_p2 = (!l_2_reg_226.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(l_2_reg_226.read() == ap_const_lv3_4);
}

void myFuncAccel::thread_tmp_2_fu_286_p2() {
    tmp_2_fu_286_p2 = (!k_reg_158.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_158.read() == ap_const_lv3_4);
}

void myFuncAccel::thread_tmp_4_fu_276_p1() {
    tmp_4_fu_276_p1 = esl_zext<64,12>(tmp_1_fu_268_p3.read());
}

void myFuncAccel::thread_tmp_5_fu_362_p2() {
    tmp_5_fu_362_p2 = (!l_reg_180.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(l_reg_180.read() == ap_const_lv3_4);
}

void myFuncAccel::thread_tmp_6_fu_313_p2() {
    tmp_6_fu_313_p2 = (!k_1_reg_169.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_1_reg_169.read() == ap_const_lv3_4);
}

void myFuncAccel::thread_tmp_7_fu_329_p3() {
    tmp_7_fu_329_p3 = esl_concat<2,2>(tmp_13_fu_325_p1.read(), ap_const_lv2_0);
}

void myFuncAccel::thread_tmp_8_fu_348_p2() {
    tmp_8_fu_348_p2 = (!tmp_1_reg_435.read().is_01() || !k_1_cast4_reg_468.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_1_reg_435.read()) + sc_biguint<12>(k_1_cast4_reg_468.read()));
}

void myFuncAccel::thread_tmp_9_fu_352_p1() {
    tmp_9_fu_352_p1 = esl_zext<64,12>(tmp_8_fu_348_p2.read());
}

void myFuncAccel::thread_tmp_fu_256_p2() {
    tmp_fu_256_p2 = (!i_reg_147.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_147.read() == ap_const_lv10_3E8);
}

void myFuncAccel::thread_tmp_s_fu_378_p2() {
    tmp_s_fu_378_p2 = (!l_1_reg_191.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(l_1_reg_191.read() == ap_const_lv3_4);
}

void myFuncAccel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_256_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read())) && esl_seteq<1,1,1>(tmp_2_fu_286_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_2_fu_286_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_313_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_362_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(data2_rsp_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_378_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_378_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_250_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(data2_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read())) && (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_20_fu_409_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_10_reg_542.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_reg_542.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_20_fu_409_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_write_state23.read())))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<23>) ("XXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void myFuncAccel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"size\" :  \"" << size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dim\" :  \"" << dim.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"threshold\" :  \"" << threshold.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_req_din\" :  \"" << data0_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_req_full_n\" :  \"" << data0_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_req_write\" :  \"" << data0_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_rsp_empty_n\" :  \"" << data0_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_rsp_read\" :  \"" << data0_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_address\" :  \"" << data0_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_datain\" :  \"" << data0_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_dataout\" :  \"" << data0_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_size\" :  \"" << data0_size.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_req_din\" :  \"" << data1_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_req_full_n\" :  \"" << data1_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_req_write\" :  \"" << data1_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_rsp_empty_n\" :  \"" << data1_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_rsp_read\" :  \"" << data1_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_address\" :  \"" << data1_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_datain\" :  \"" << data1_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_dataout\" :  \"" << data1_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_size\" :  \"" << data1_size.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_req_din\" :  \"" << data2_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_req_full_n\" :  \"" << data2_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_req_write\" :  \"" << data2_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_rsp_empty_n\" :  \"" << data2_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_rsp_read\" :  \"" << data2_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_address\" :  \"" << data2_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_datain\" :  \"" << data2_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_dataout\" :  \"" << data2_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_size\" :  \"" << data2_size.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

