// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myFuncAccel_HH_
#define _myFuncAccel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1.h"
#include "myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1.h"
#include "myFuncAccel_fcmp_32ns_32ns_1_1_1.h"

namespace ap_rtl {

struct myFuncAccel : public sc_module {
    // Port declarations 36
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > size;
    sc_in< sc_lv<32> > dim;
    sc_in< sc_lv<32> > threshold;
    sc_out< sc_logic > data0_req_din;
    sc_in< sc_logic > data0_req_full_n;
    sc_out< sc_logic > data0_req_write;
    sc_in< sc_logic > data0_rsp_empty_n;
    sc_out< sc_logic > data0_rsp_read;
    sc_out< sc_lv<32> > data0_address;
    sc_in< sc_lv<32> > data0_datain;
    sc_out< sc_lv<32> > data0_dataout;
    sc_out< sc_lv<32> > data0_size;
    sc_out< sc_logic > data1_req_din;
    sc_in< sc_logic > data1_req_full_n;
    sc_out< sc_logic > data1_req_write;
    sc_in< sc_logic > data1_rsp_empty_n;
    sc_out< sc_logic > data1_rsp_read;
    sc_out< sc_lv<32> > data1_address;
    sc_in< sc_lv<32> > data1_datain;
    sc_out< sc_lv<32> > data1_dataout;
    sc_out< sc_lv<32> > data1_size;
    sc_out< sc_logic > data2_req_din;
    sc_in< sc_logic > data2_req_full_n;
    sc_out< sc_logic > data2_req_write;
    sc_in< sc_logic > data2_rsp_empty_n;
    sc_out< sc_logic > data2_rsp_read;
    sc_out< sc_lv<32> > data2_address;
    sc_in< sc_lv<32> > data2_datain;
    sc_out< sc_lv<32> > data2_dataout;
    sc_out< sc_lv<32> > data2_size;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    myFuncAccel(sc_module_name name);
    SC_HAS_PROCESS(myFuncAccel);

    ~myFuncAccel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>* myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1;
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>* myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2;
    myFuncAccel_fcmp_32ns_32ns_1_1_1<1,1,32,32,1>* myFuncAccel_fcmp_32ns_32ns_1_1_1_U3;
    sc_signal< sc_lv<23> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > i_1_fu_262_p2;
    sc_signal< sc_lv<10> > i_1_reg_430;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > tmp_1_fu_268_p3;
    sc_signal< sc_lv<12> > tmp_1_reg_435;
    sc_signal< sc_lv<1> > tmp_fu_256_p2;
    sc_signal< sc_lv<64> > tmp_4_fu_276_p1;
    sc_signal< sc_lv<64> > tmp_4_reg_441;
    sc_signal< sc_lv<32> > data2_addr_reg_446;
    sc_signal< sc_lv<3> > k_2_fu_292_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_2_fu_286_p2;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<32> > data1_addr_reg_462;
    sc_signal< sc_lv<12> > k_1_cast4_fu_309_p1;
    sc_signal< sc_lv<12> > k_1_cast4_reg_468;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > k_3_fu_319_p2;
    sc_signal< sc_lv<3> > k_3_reg_476;
    sc_signal< sc_lv<1> > tmp_6_fu_313_p2;
    sc_signal< sc_lv<32> > data2_addr_1_reg_487;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > l_3_fu_368_p2;
    sc_signal< sc_lv<3> > l_3_reg_496;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > tmp_5_fu_362_p2;
    sc_signal< bool > ap_block_state6;
    sc_signal< sc_lv<32> > data0_addr_read_reg_501;
    sc_signal< sc_lv<32> > data1_addr_read_reg_506;
    sc_signal< sc_lv<32> > grp_fu_241_p2;
    sc_signal< sc_lv<32> > tmp_15_reg_511;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > data2_addr_1_read_reg_516;
    sc_signal< sc_lv<32> > grp_fu_237_p2;
    sc_signal< sc_lv<32> > tmp_16_reg_521;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<3> > l_4_fu_384_p2;
    sc_signal< sc_lv<3> > l_4_reg_529;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_lv<12> > tmp_17_fu_390_p2;
    sc_signal< sc_lv<12> > tmp_17_reg_537;
    sc_signal< sc_lv<1> > tmp_s_fu_378_p2;
    sc_signal< sc_lv<1> > grp_fu_250_p2;
    sc_signal< sc_lv<1> > tmp_10_reg_542;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_lv<32> > data2_addr_2_read_reg_552;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_lv<32> > r_1_fu_405_p1;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<3> > l_5_fu_415_p2;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<1> > tmp_20_fu_409_p2;
    sc_signal< bool > ap_predicate_op141_write_state23;
    sc_signal< bool > ap_block_state23;
    sc_signal< sc_lv<10> > i_reg_147;
    sc_signal< sc_lv<3> > k_reg_158;
    sc_signal< sc_lv<3> > k_1_reg_169;
    sc_signal< sc_lv<3> > l_reg_180;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<3> > l_1_reg_191;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_lv<32> > r_reg_202;
    sc_signal< sc_lv<32> > r_be_reg_214;
    sc_signal< sc_lv<3> > l_2_reg_226;
    sc_signal< sc_lv<64> > tmp_14_fu_337_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_352_p1;
    sc_signal< sc_lv<64> > tmp_18_fu_395_p1;
    sc_signal< sc_lv<1> > is_0iter_fu_298_p2;
    sc_signal< sc_lv<1> > is_0iter3_fu_421_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<2> > tmp_13_fu_325_p1;
    sc_signal< sc_lv<4> > tmp_7_fu_329_p3;
    sc_signal< sc_lv<12> > tmp_8_fu_348_p2;
    sc_signal< sc_lv<12> > l_1_cast2_fu_374_p1;
    sc_signal< sc_lv<1> > tmp_19_fu_245_p2;
    sc_signal< sc_logic > grp_fu_241_ce;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<23> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<23> ap_ST_fsm_state1;
    static const sc_lv<23> ap_ST_fsm_state2;
    static const sc_lv<23> ap_ST_fsm_state3;
    static const sc_lv<23> ap_ST_fsm_state4;
    static const sc_lv<23> ap_ST_fsm_state5;
    static const sc_lv<23> ap_ST_fsm_state6;
    static const sc_lv<23> ap_ST_fsm_state7;
    static const sc_lv<23> ap_ST_fsm_state8;
    static const sc_lv<23> ap_ST_fsm_state9;
    static const sc_lv<23> ap_ST_fsm_state10;
    static const sc_lv<23> ap_ST_fsm_state11;
    static const sc_lv<23> ap_ST_fsm_state12;
    static const sc_lv<23> ap_ST_fsm_state13;
    static const sc_lv<23> ap_ST_fsm_state14;
    static const sc_lv<23> ap_ST_fsm_state15;
    static const sc_lv<23> ap_ST_fsm_state16;
    static const sc_lv<23> ap_ST_fsm_state17;
    static const sc_lv<23> ap_ST_fsm_state18;
    static const sc_lv<23> ap_ST_fsm_state19;
    static const sc_lv<23> ap_ST_fsm_state20;
    static const sc_lv<23> ap_ST_fsm_state21;
    static const sc_lv<23> ap_ST_fsm_state22;
    static const sc_lv<23> ap_ST_fsm_state23;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_42C80000;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state23();
    void thread_ap_block_state3();
    void thread_ap_block_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op141_write_state23();
    void thread_ap_ready();
    void thread_data0_address();
    void thread_data0_dataout();
    void thread_data0_req_din();
    void thread_data0_req_write();
    void thread_data0_rsp_read();
    void thread_data0_size();
    void thread_data1_address();
    void thread_data1_dataout();
    void thread_data1_req_din();
    void thread_data1_req_write();
    void thread_data1_rsp_read();
    void thread_data1_size();
    void thread_data2_address();
    void thread_data2_dataout();
    void thread_data2_req_din();
    void thread_data2_req_write();
    void thread_data2_rsp_read();
    void thread_data2_size();
    void thread_grp_fu_241_ce();
    void thread_grp_fu_250_p2();
    void thread_i_1_fu_262_p2();
    void thread_is_0iter3_fu_421_p2();
    void thread_is_0iter_fu_298_p2();
    void thread_k_1_cast4_fu_309_p1();
    void thread_k_2_fu_292_p2();
    void thread_k_3_fu_319_p2();
    void thread_l_1_cast2_fu_374_p1();
    void thread_l_3_fu_368_p2();
    void thread_l_4_fu_384_p2();
    void thread_l_5_fu_415_p2();
    void thread_r_1_fu_405_p1();
    void thread_tmp_13_fu_325_p1();
    void thread_tmp_14_fu_337_p1();
    void thread_tmp_17_fu_390_p2();
    void thread_tmp_18_fu_395_p1();
    void thread_tmp_1_fu_268_p3();
    void thread_tmp_20_fu_409_p2();
    void thread_tmp_2_fu_286_p2();
    void thread_tmp_4_fu_276_p1();
    void thread_tmp_5_fu_362_p2();
    void thread_tmp_6_fu_313_p2();
    void thread_tmp_7_fu_329_p3();
    void thread_tmp_8_fu_348_p2();
    void thread_tmp_9_fu_352_p1();
    void thread_tmp_fu_256_p2();
    void thread_tmp_s_fu_378_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
