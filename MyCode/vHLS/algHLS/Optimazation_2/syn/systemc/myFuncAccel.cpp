// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myFuncAccel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myFuncAccel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myFuncAccel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<43> myFuncAccel::ap_ST_fsm_state1 = "1";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state2 = "10";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state3 = "100";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state4 = "1000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state5 = "10000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state6 = "100000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state7 = "1000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state8 = "10000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state9 = "100000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<43> myFuncAccel::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<32> myFuncAccel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> myFuncAccel::ap_const_lv32_3 = "11";
const sc_lv<32> myFuncAccel::ap_const_lv32_7 = "111";
const sc_lv<32> myFuncAccel::ap_const_lv32_B = "1011";
const sc_lv<32> myFuncAccel::ap_const_lv32_F = "1111";
const sc_lv<32> myFuncAccel::ap_const_lv32_14 = "10100";
const sc_lv<32> myFuncAccel::ap_const_lv32_19 = "11001";
const sc_lv<32> myFuncAccel::ap_const_lv32_1E = "11110";
const sc_lv<32> myFuncAccel::ap_const_lv32_4 = "100";
const sc_lv<32> myFuncAccel::ap_const_lv32_C = "1100";
const sc_lv<32> myFuncAccel::ap_const_lv32_11 = "10001";
const sc_lv<32> myFuncAccel::ap_const_lv32_16 = "10110";
const sc_lv<32> myFuncAccel::ap_const_lv32_1D = "11101";
const sc_lv<32> myFuncAccel::ap_const_lv32_22 = "100010";
const sc_lv<32> myFuncAccel::ap_const_lv32_10 = "10000";
const sc_lv<32> myFuncAccel::ap_const_lv32_15 = "10101";
const sc_lv<32> myFuncAccel::ap_const_lv32_1A = "11010";
const sc_lv<32> myFuncAccel::ap_const_lv32_1B = "11011";
const sc_lv<32> myFuncAccel::ap_const_lv32_27 = "100111";
const sc_lv<32> myFuncAccel::ap_const_lv32_1F = "11111";
const sc_lv<32> myFuncAccel::ap_const_lv32_23 = "100011";
const sc_lv<32> myFuncAccel::ap_const_lv32_13 = "10011";
const sc_lv<32> myFuncAccel::ap_const_lv32_18 = "11000";
const sc_lv<32> myFuncAccel::ap_const_lv32_1 = "1";
const sc_lv<1> myFuncAccel::ap_const_lv1_0 = "0";
const sc_lv<32> myFuncAccel::ap_const_lv32_5 = "101";
const sc_lv<32> myFuncAccel::ap_const_lv32_6 = "110";
const sc_lv<32> myFuncAccel::ap_const_lv32_8 = "1000";
const sc_lv<32> myFuncAccel::ap_const_lv32_9 = "1001";
const sc_lv<32> myFuncAccel::ap_const_lv32_A = "1010";
const sc_lv<32> myFuncAccel::ap_const_lv32_D = "1101";
const sc_lv<32> myFuncAccel::ap_const_lv32_E = "1110";
const sc_lv<32> myFuncAccel::ap_const_lv32_1C = "11100";
const sc_lv<32> myFuncAccel::ap_const_lv32_20 = "100000";
const sc_lv<32> myFuncAccel::ap_const_lv32_24 = "100100";
const sc_lv<32> myFuncAccel::ap_const_lv32_28 = "101000";
const sc_lv<32> myFuncAccel::ap_const_lv32_29 = "101001";
const sc_lv<32> myFuncAccel::ap_const_lv32_2A = "101010";
const sc_lv<10> myFuncAccel::ap_const_lv10_0 = "0000000000";
const sc_lv<1> myFuncAccel::ap_const_lv1_1 = "1";
const sc_lv<3> myFuncAccel::ap_const_lv3_0 = "000";
const sc_lv<32> myFuncAccel::ap_const_lv32_12 = "10010";
const sc_lv<32> myFuncAccel::ap_const_lv32_17 = "10111";
const sc_lv<32> myFuncAccel::ap_const_lv32_42C80000 = "1000010110010000000000000000000";
const sc_lv<10> myFuncAccel::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> myFuncAccel::ap_const_lv10_1 = "1";
const sc_lv<2> myFuncAccel::ap_const_lv2_0 = "00";
const sc_lv<8> myFuncAccel::ap_const_lv8_FF = "11111111";
const sc_lv<23> myFuncAccel::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<4> myFuncAccel::ap_const_lv4_4 = "100";
const sc_lv<4> myFuncAccel::ap_const_lv4_0 = "0000";
const sc_lv<3> myFuncAccel::ap_const_lv3_1 = "1";
const sc_lv<32> myFuncAccel::ap_const_lv32_25 = "100101";
const sc_lv<32> myFuncAccel::ap_const_lv32_26 = "100110";
const sc_lv<32> myFuncAccel::ap_const_lv32_2 = "10";
const sc_lv<5> myFuncAccel::ap_const_lv5_2 = "10";
const bool myFuncAccel::ap_const_boolean_1 = true;

myFuncAccel::myFuncAccel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1 = new myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>("myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1");
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->clk(ap_clk);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->reset(ap_rst);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->din0(grp_fu_151_p0);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->din1(grp_fu_151_p1);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->ce(grp_fu_151_ce);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->dout(grp_fu_151_p2);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2 = new myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>("myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2");
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->clk(ap_clk);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->reset(ap_rst);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->din0(grp_fu_156_p0);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->din1(grp_fu_156_p1);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->ce(grp_fu_156_ce);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->dout(grp_fu_156_p2);
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3 = new myFuncAccel_fcmp_32ns_32ns_1_1_1<1,1,32,32,1>("myFuncAccel_fcmp_32ns_32ns_1_1_1_U3");
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3->din0(grp_fu_160_p0);
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3->din1(ap_var_for_const0);
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3->opcode(ap_var_for_const1);
    myFuncAccel_fcmp_32ns_32ns_1_1_1_U3->dout(grp_fu_160_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );

    SC_METHOD(thread_ap_block_state43);
    sensitive << ( data2_req_full_n );
    sensitive << ( exitcond_fu_452_p2 );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );

    SC_METHOD(thread_ap_block_state6);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );

    SC_METHOD(thread_ap_block_state7);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_data0_address);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_data0_dataout);

    SC_METHOD(thread_data0_req_din);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_data0_req_write);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_data0_rsp_read);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_data0_size);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_data1_address);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );
    sensitive << ( tmp_3_fu_238_p1 );

    SC_METHOD(thread_data1_dataout);

    SC_METHOD(thread_data1_req_din);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_data1_req_write);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_data1_rsp_read);
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data1_size);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );

    SC_METHOD(thread_data2_address);
    sensitive << ( data2_req_full_n );
    sensitive << ( data2_addr_reg_477 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond_fu_452_p2 );
    sensitive << ( is_0iter_fu_463_p2 );

    SC_METHOD(thread_data2_dataout);
    sensitive << ( data2_req_full_n );
    sensitive << ( reg_187 );
    sensitive << ( reg_200 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond_fu_452_p2 );

    SC_METHOD(thread_data2_req_din);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond_fu_452_p2 );
    sensitive << ( is_0iter_fu_463_p2 );

    SC_METHOD(thread_data2_req_write);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond_fu_452_p2 );
    sensitive << ( is_0iter_fu_463_p2 );

    SC_METHOD(thread_data2_rsp_read);

    SC_METHOD(thread_data2_size);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( tmp_25_cast_reg_594 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond_fu_452_p2 );
    sensitive << ( is_0iter_fu_463_p2 );

    SC_METHOD(thread_exitcond1_fu_218_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_129 );

    SC_METHOD(thread_exitcond_fu_452_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( r_1_cast_cast_reg_589 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond_fu_452_p2 );
    sensitive << ( l_2_cast_fu_448_p1 );

    SC_METHOD(thread_grp_fu_151_ce);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_151_p0);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( reg_175 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( reg_181 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( reg_187 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( reg_194 );
    sensitive << ( reg_200 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( reg_207 );
    sensitive << ( reg_213 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tempVal_1_3_reg_543 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_grp_fu_151_p1);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( reg_175 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( reg_181 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( reg_194 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( reg_207 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_grp_fu_156_ce);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_156_p0);
    sensitive << ( reg_165 );
    sensitive << ( reg_170 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( data0_read_2_reg_498 );
    sensitive << ( data0_read_3_reg_508 );
    sensitive << ( data0_read_5_reg_518 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( data0_read_6_reg_523 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( data0_read_7_reg_528 );
    sensitive << ( data0_read_10_reg_533 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( data0_read_11_reg_538 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_grp_fu_156_p1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( data1_addr_read_reg_488 );
    sensitive << ( data1_addr_read_1_reg_493 );
    sensitive << ( data1_addr_read_2_reg_503 );
    sensitive << ( data1_addr_read_3_reg_513 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_grp_fu_160_p0);
    sensitive << ( reg_187 );
    sensitive << ( reg_200 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_i_1_fu_224_p2);
    sensitive << ( i_reg_129 );

    SC_METHOD(thread_is_0iter_fu_463_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond_fu_452_p2 );
    sensitive << ( l_2_reg_140 );

    SC_METHOD(thread_l_2_cast_fu_448_p1);
    sensitive << ( l_2_reg_140 );

    SC_METHOD(thread_l_fu_457_p2);
    sensitive << ( l_2_reg_140 );

    SC_METHOD(thread_notlhs1_fu_360_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( tmp_13_fu_346_p4 );

    SC_METHOD(thread_notlhs2_fu_399_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( tmp_18_fu_385_p4 );

    SC_METHOD(thread_notlhs8_fu_312_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( tmp_s_fu_298_p4 );

    SC_METHOD(thread_notlhs_fu_273_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( tmp_5_fu_259_p4 );

    SC_METHOD(thread_notrhs1_fu_366_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( tmp_14_fu_356_p1 );

    SC_METHOD(thread_notrhs2_fu_405_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( tmp_19_fu_395_p1 );

    SC_METHOD(thread_notrhs9_fu_318_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( tmp_6_fu_308_p1 );

    SC_METHOD(thread_notrhs_fu_279_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( tmp_2_fu_269_p1 );

    SC_METHOD(thread_or_cond2_fu_429_p2);
    sensitive << ( tmp1_reg_563 );
    sensitive << ( tmp2_fu_423_p2 );

    SC_METHOD(thread_r_1_cast_cast_fu_434_p3);
    sensitive << ( or_cond2_reg_583 );

    SC_METHOD(thread_tempVal_1_0_3_to_int_fu_255_p1);
    sensitive << ( reg_187 );

    SC_METHOD(thread_tempVal_1_1_3_to_int_fu_294_p1);
    sensitive << ( reg_200 );

    SC_METHOD(thread_tempVal_1_2_3_to_int_fu_342_p1);
    sensitive << ( reg_200 );

    SC_METHOD(thread_tempVal_1_3_3_to_int_fu_381_p1);
    sensitive << ( reg_187 );

    SC_METHOD(thread_tmp1_fu_336_p2);
    sensitive << ( tmp_9_fu_289_p2 );
    sensitive << ( tmp_12_fu_330_p2 );

    SC_METHOD(thread_tmp2_fu_423_p2);
    sensitive << ( tmp_17_fu_376_p2 );
    sensitive << ( tmp_22_fu_417_p2 );

    SC_METHOD(thread_tmp_10_fu_324_p2);
    sensitive << ( notrhs9_fu_318_p2 );
    sensitive << ( notlhs8_fu_312_p2 );

    SC_METHOD(thread_tmp_12_fu_330_p2);
    sensitive << ( grp_fu_160_p2 );
    sensitive << ( tmp_10_fu_324_p2 );

    SC_METHOD(thread_tmp_13_fu_346_p4);
    sensitive << ( tempVal_1_2_3_to_int_fu_342_p1 );

    SC_METHOD(thread_tmp_14_fu_356_p1);
    sensitive << ( tempVal_1_2_3_to_int_fu_342_p1 );

    SC_METHOD(thread_tmp_15_fu_372_p2);
    sensitive << ( notlhs1_reg_568 );
    sensitive << ( notrhs1_reg_573 );

    SC_METHOD(thread_tmp_17_fu_376_p2);
    sensitive << ( tmp_16_reg_578 );
    sensitive << ( tmp_15_fu_372_p2 );

    SC_METHOD(thread_tmp_18_fu_385_p4);
    sensitive << ( tempVal_1_3_3_to_int_fu_381_p1 );

    SC_METHOD(thread_tmp_19_fu_395_p1);
    sensitive << ( tempVal_1_3_3_to_int_fu_381_p1 );

    SC_METHOD(thread_tmp_20_fu_411_p2);
    sensitive << ( notrhs2_fu_405_p2 );
    sensitive << ( notlhs2_fu_399_p2 );

    SC_METHOD(thread_tmp_22_fu_417_p2);
    sensitive << ( grp_fu_160_p2 );
    sensitive << ( tmp_20_fu_411_p2 );

    SC_METHOD(thread_tmp_25_cast_fu_441_p3);
    sensitive << ( or_cond2_reg_583 );

    SC_METHOD(thread_tmp_2_fu_269_p1);
    sensitive << ( tempVal_1_0_3_to_int_fu_255_p1 );

    SC_METHOD(thread_tmp_3_fu_238_p1);
    sensitive << ( tmp_fu_230_p3 );

    SC_METHOD(thread_tmp_5_fu_259_p4);
    sensitive << ( tempVal_1_0_3_to_int_fu_255_p1 );

    SC_METHOD(thread_tmp_6_fu_308_p1);
    sensitive << ( tempVal_1_1_3_to_int_fu_294_p1 );

    SC_METHOD(thread_tmp_7_fu_285_p2);
    sensitive << ( notlhs_reg_548 );
    sensitive << ( notrhs_reg_553 );

    SC_METHOD(thread_tmp_9_fu_289_p2);
    sensitive << ( tmp_8_reg_558 );
    sensitive << ( tmp_7_fu_285_p2 );

    SC_METHOD(thread_tmp_fu_230_p3);
    sensitive << ( i_reg_129 );

    SC_METHOD(thread_tmp_s_fu_298_p4);
    sensitive << ( tempVal_1_1_3_to_int_fu_294_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data0_rsp_empty_n );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_218_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond_fu_452_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myFuncAccel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, size, "(port)size");
    sc_trace(mVcdFile, dim, "(port)dim");
    sc_trace(mVcdFile, threshold, "(port)threshold");
    sc_trace(mVcdFile, data0_req_din, "(port)data0_req_din");
    sc_trace(mVcdFile, data0_req_full_n, "(port)data0_req_full_n");
    sc_trace(mVcdFile, data0_req_write, "(port)data0_req_write");
    sc_trace(mVcdFile, data0_rsp_empty_n, "(port)data0_rsp_empty_n");
    sc_trace(mVcdFile, data0_rsp_read, "(port)data0_rsp_read");
    sc_trace(mVcdFile, data0_address, "(port)data0_address");
    sc_trace(mVcdFile, data0_datain, "(port)data0_datain");
    sc_trace(mVcdFile, data0_dataout, "(port)data0_dataout");
    sc_trace(mVcdFile, data0_size, "(port)data0_size");
    sc_trace(mVcdFile, data1_req_din, "(port)data1_req_din");
    sc_trace(mVcdFile, data1_req_full_n, "(port)data1_req_full_n");
    sc_trace(mVcdFile, data1_req_write, "(port)data1_req_write");
    sc_trace(mVcdFile, data1_rsp_empty_n, "(port)data1_rsp_empty_n");
    sc_trace(mVcdFile, data1_rsp_read, "(port)data1_rsp_read");
    sc_trace(mVcdFile, data1_address, "(port)data1_address");
    sc_trace(mVcdFile, data1_datain, "(port)data1_datain");
    sc_trace(mVcdFile, data1_dataout, "(port)data1_dataout");
    sc_trace(mVcdFile, data1_size, "(port)data1_size");
    sc_trace(mVcdFile, data2_req_din, "(port)data2_req_din");
    sc_trace(mVcdFile, data2_req_full_n, "(port)data2_req_full_n");
    sc_trace(mVcdFile, data2_req_write, "(port)data2_req_write");
    sc_trace(mVcdFile, data2_rsp_empty_n, "(port)data2_rsp_empty_n");
    sc_trace(mVcdFile, data2_rsp_read, "(port)data2_rsp_read");
    sc_trace(mVcdFile, data2_address, "(port)data2_address");
    sc_trace(mVcdFile, data2_datain, "(port)data2_datain");
    sc_trace(mVcdFile, data2_dataout, "(port)data2_dataout");
    sc_trace(mVcdFile, data2_size, "(port)data2_size");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_165, "reg_165");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, reg_170, "reg_170");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_fu_156_p2, "grp_fu_156_p2");
    sc_trace(mVcdFile, reg_175, "reg_175");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, reg_181, "reg_181");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, grp_fu_151_p2, "grp_fu_151_p2");
    sc_trace(mVcdFile, reg_187, "reg_187");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, reg_194, "reg_194");
    sc_trace(mVcdFile, reg_200, "reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, reg_207, "reg_207");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, reg_213, "reg_213");
    sc_trace(mVcdFile, i_1_fu_224_p2, "i_1_fu_224_p2");
    sc_trace(mVcdFile, i_1_reg_472, "i_1_reg_472");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, data2_addr_reg_477, "data2_addr_reg_477");
    sc_trace(mVcdFile, exitcond1_fu_218_p2, "exitcond1_fu_218_p2");
    sc_trace(mVcdFile, data1_addr_read_reg_488, "data1_addr_read_reg_488");
    sc_trace(mVcdFile, data1_addr_read_1_reg_493, "data1_addr_read_1_reg_493");
    sc_trace(mVcdFile, data0_read_2_reg_498, "data0_read_2_reg_498");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_block_state6, "ap_block_state6");
    sc_trace(mVcdFile, data1_addr_read_2_reg_503, "data1_addr_read_2_reg_503");
    sc_trace(mVcdFile, data0_read_3_reg_508, "data0_read_3_reg_508");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_block_state7, "ap_block_state7");
    sc_trace(mVcdFile, data1_addr_read_3_reg_513, "data1_addr_read_3_reg_513");
    sc_trace(mVcdFile, data0_read_5_reg_518, "data0_read_5_reg_518");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, data0_read_6_reg_523, "data0_read_6_reg_523");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, data0_read_7_reg_528, "data0_read_7_reg_528");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, data0_read_10_reg_533, "data0_read_10_reg_533");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, data0_read_11_reg_538, "data0_read_11_reg_538");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, tempVal_1_3_reg_543, "tempVal_1_3_reg_543");
    sc_trace(mVcdFile, notlhs_fu_273_p2, "notlhs_fu_273_p2");
    sc_trace(mVcdFile, notlhs_reg_548, "notlhs_reg_548");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, notrhs_fu_279_p2, "notrhs_fu_279_p2");
    sc_trace(mVcdFile, notrhs_reg_553, "notrhs_reg_553");
    sc_trace(mVcdFile, grp_fu_160_p2, "grp_fu_160_p2");
    sc_trace(mVcdFile, tmp_8_reg_558, "tmp_8_reg_558");
    sc_trace(mVcdFile, tmp1_fu_336_p2, "tmp1_fu_336_p2");
    sc_trace(mVcdFile, tmp1_reg_563, "tmp1_reg_563");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, notlhs1_fu_360_p2, "notlhs1_fu_360_p2");
    sc_trace(mVcdFile, notlhs1_reg_568, "notlhs1_reg_568");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, notrhs1_fu_366_p2, "notrhs1_fu_366_p2");
    sc_trace(mVcdFile, notrhs1_reg_573, "notrhs1_reg_573");
    sc_trace(mVcdFile, tmp_16_reg_578, "tmp_16_reg_578");
    sc_trace(mVcdFile, or_cond2_fu_429_p2, "or_cond2_fu_429_p2");
    sc_trace(mVcdFile, or_cond2_reg_583, "or_cond2_reg_583");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, r_1_cast_cast_fu_434_p3, "r_1_cast_cast_fu_434_p3");
    sc_trace(mVcdFile, r_1_cast_cast_reg_589, "r_1_cast_cast_reg_589");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, tmp_25_cast_fu_441_p3, "tmp_25_cast_fu_441_p3");
    sc_trace(mVcdFile, tmp_25_cast_reg_594, "tmp_25_cast_reg_594");
    sc_trace(mVcdFile, l_fu_457_p2, "l_fu_457_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, exitcond_fu_452_p2, "exitcond_fu_452_p2");
    sc_trace(mVcdFile, ap_block_state43, "ap_block_state43");
    sc_trace(mVcdFile, i_reg_129, "i_reg_129");
    sc_trace(mVcdFile, l_2_reg_140, "l_2_reg_140");
    sc_trace(mVcdFile, tmp_3_fu_238_p1, "tmp_3_fu_238_p1");
    sc_trace(mVcdFile, is_0iter_fu_463_p2, "is_0iter_fu_463_p2");
    sc_trace(mVcdFile, grp_fu_151_p0, "grp_fu_151_p0");
    sc_trace(mVcdFile, grp_fu_151_p1, "grp_fu_151_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, grp_fu_156_p0, "grp_fu_156_p0");
    sc_trace(mVcdFile, grp_fu_156_p1, "grp_fu_156_p1");
    sc_trace(mVcdFile, grp_fu_160_p0, "grp_fu_160_p0");
    sc_trace(mVcdFile, tmp_fu_230_p3, "tmp_fu_230_p3");
    sc_trace(mVcdFile, tempVal_1_0_3_to_int_fu_255_p1, "tempVal_1_0_3_to_int_fu_255_p1");
    sc_trace(mVcdFile, tmp_5_fu_259_p4, "tmp_5_fu_259_p4");
    sc_trace(mVcdFile, tmp_2_fu_269_p1, "tmp_2_fu_269_p1");
    sc_trace(mVcdFile, tmp_7_fu_285_p2, "tmp_7_fu_285_p2");
    sc_trace(mVcdFile, tempVal_1_1_3_to_int_fu_294_p1, "tempVal_1_1_3_to_int_fu_294_p1");
    sc_trace(mVcdFile, tmp_s_fu_298_p4, "tmp_s_fu_298_p4");
    sc_trace(mVcdFile, tmp_6_fu_308_p1, "tmp_6_fu_308_p1");
    sc_trace(mVcdFile, notrhs9_fu_318_p2, "notrhs9_fu_318_p2");
    sc_trace(mVcdFile, notlhs8_fu_312_p2, "notlhs8_fu_312_p2");
    sc_trace(mVcdFile, tmp_10_fu_324_p2, "tmp_10_fu_324_p2");
    sc_trace(mVcdFile, tmp_9_fu_289_p2, "tmp_9_fu_289_p2");
    sc_trace(mVcdFile, tmp_12_fu_330_p2, "tmp_12_fu_330_p2");
    sc_trace(mVcdFile, tempVal_1_2_3_to_int_fu_342_p1, "tempVal_1_2_3_to_int_fu_342_p1");
    sc_trace(mVcdFile, tmp_13_fu_346_p4, "tmp_13_fu_346_p4");
    sc_trace(mVcdFile, tmp_14_fu_356_p1, "tmp_14_fu_356_p1");
    sc_trace(mVcdFile, tmp_15_fu_372_p2, "tmp_15_fu_372_p2");
    sc_trace(mVcdFile, tempVal_1_3_3_to_int_fu_381_p1, "tempVal_1_3_3_to_int_fu_381_p1");
    sc_trace(mVcdFile, tmp_18_fu_385_p4, "tmp_18_fu_385_p4");
    sc_trace(mVcdFile, tmp_19_fu_395_p1, "tmp_19_fu_395_p1");
    sc_trace(mVcdFile, notrhs2_fu_405_p2, "notrhs2_fu_405_p2");
    sc_trace(mVcdFile, notlhs2_fu_399_p2, "notlhs2_fu_399_p2");
    sc_trace(mVcdFile, tmp_20_fu_411_p2, "tmp_20_fu_411_p2");
    sc_trace(mVcdFile, tmp_17_fu_376_p2, "tmp_17_fu_376_p2");
    sc_trace(mVcdFile, tmp_22_fu_417_p2, "tmp_22_fu_417_p2");
    sc_trace(mVcdFile, tmp2_fu_423_p2, "tmp2_fu_423_p2");
    sc_trace(mVcdFile, l_2_cast_fu_448_p1, "l_2_cast_fu_448_p1");
    sc_trace(mVcdFile, grp_fu_151_ce, "grp_fu_151_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_156_ce, "grp_fu_156_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("myFuncAccel.hdltvin.dat");
    mHdltvoutHandle.open("myFuncAccel.hdltvout.dat");
}

myFuncAccel::~myFuncAccel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1;
    delete myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2;
    delete myFuncAccel_fcmp_32ns_32ns_1_1_1_U3;
}

void myFuncAccel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_42C80000;
}

void myFuncAccel::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_2;
}

void myFuncAccel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read())) && 
         esl_seteq<1,1,1>(exitcond_fu_452_p2.read(), ap_const_lv1_1))) {
        i_reg_129 = i_1_reg_472.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_129 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read())))) {
        l_2_reg_140 = l_fu_457_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        l_2_reg_140 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        data0_read_10_reg_533 = data0_datain.read();
    }
    if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        data0_read_11_reg_538 = data0_datain.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        data0_read_2_reg_498 = data0_datain.read();
        data1_addr_read_2_reg_503 = data1_datain.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        data0_read_3_reg_508 = data0_datain.read();
        data1_addr_read_3_reg_513 = data1_datain.read();
    }
    if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        data0_read_5_reg_518 = data0_datain.read();
    }
    if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        data0_read_6_reg_523 = data0_datain.read();
    }
    if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        data0_read_7_reg_528 = data0_datain.read();
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        data1_addr_read_1_reg_493 = data1_datain.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())))) {
        data1_addr_read_reg_488 = data1_datain.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_218_p2.read(), ap_const_lv1_0))) {
        data2_addr_reg_477 =  (sc_lv<32>) (tmp_3_fu_238_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_472 = i_1_fu_224_p2.read();
    }
    if ((esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        notlhs1_reg_568 = notlhs1_fu_360_p2.read();
        notrhs1_reg_573 = notrhs1_fu_366_p2.read();
        tmp_16_reg_578 = grp_fu_160_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1))) {
        notlhs_reg_548 = notlhs_fu_273_p2.read();
        notrhs_reg_553 = notrhs_fu_279_p2.read();
        tmp_8_reg_558 = grp_fu_160_p2.read();
    }
    if ((esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        or_cond2_reg_583 = or_cond2_fu_429_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        r_1_cast_cast_reg_589 = r_1_cast_cast_fu_434_p3.read();
        tmp_25_cast_reg_594 = tmp_25_cast_fu_441_p3.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
  esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())))) {
        reg_165 = data0_datain.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())))) {
        reg_170 = data0_datain.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
  esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        reg_175 = grp_fu_156_p2.read();
    }
    if (((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        reg_181 = grp_fu_156_p2.read();
    }
    if (((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        reg_187 = grp_fu_151_p2.read();
    }
    if (((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())))) {
        reg_194 = grp_fu_156_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        reg_200 = grp_fu_151_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        reg_207 = grp_fu_156_p2.read();
    }
    if (((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) || (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())))) {
        reg_213 = grp_fu_151_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        tempVal_1_3_reg_543 = grp_fu_151_p2.read();
    }
    if ((esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        tmp1_reg_563 = tmp1_fu_336_p2.read();
    }
}

void myFuncAccel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void myFuncAccel::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void myFuncAccel::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void myFuncAccel::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void myFuncAccel::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void myFuncAccel::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void myFuncAccel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void myFuncAccel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void myFuncAccel::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void myFuncAccel::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void myFuncAccel::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void myFuncAccel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void myFuncAccel::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void myFuncAccel::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void myFuncAccel::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void myFuncAccel::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void myFuncAccel::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void myFuncAccel::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void myFuncAccel::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void myFuncAccel::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void myFuncAccel::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void myFuncAccel::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void myFuncAccel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void myFuncAccel::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void myFuncAccel::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void myFuncAccel::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void myFuncAccel::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void myFuncAccel::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void myFuncAccel::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void myFuncAccel::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void myFuncAccel::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void myFuncAccel::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void myFuncAccel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void myFuncAccel::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void myFuncAccel::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void myFuncAccel::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void myFuncAccel::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void myFuncAccel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void myFuncAccel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void myFuncAccel::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void myFuncAccel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void myFuncAccel::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void myFuncAccel::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()));
}

void myFuncAccel::thread_ap_block_state43() {
    ap_block_state43 = (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()));
}

void myFuncAccel::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()));
}

void myFuncAccel::thread_ap_block_state6() {
    ap_block_state6 = (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()));
}

void myFuncAccel::thread_ap_block_state7() {
    ap_block_state7 = (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()));
}

void myFuncAccel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_218_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void myFuncAccel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myFuncAccel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_218_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data0_address() {
    data0_address = ap_const_lv32_0;
}

void myFuncAccel::thread_data0_dataout() {
    data0_dataout = ap_const_lv32_0;
}

void myFuncAccel::thread_data0_req_din() {
    data0_req_din = ap_const_logic_0;
}

void myFuncAccel::thread_data0_req_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_218_p2.read(), ap_const_lv1_0))) {
        data0_req_write = ap_const_logic_1;
    } else {
        data0_req_write = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data0_rsp_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())))) {
        data0_rsp_read = ap_const_logic_1;
    } else {
        data0_rsp_read = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data0_size() {
    data0_size = ap_const_lv32_10;
}

void myFuncAccel::thread_data1_address() {
    data1_address =  (sc_lv<32>) (tmp_3_fu_238_p1.read());
}

void myFuncAccel::thread_data1_dataout() {
    data1_dataout = ap_const_lv32_0;
}

void myFuncAccel::thread_data1_req_din() {
    data1_req_din = ap_const_logic_0;
}

void myFuncAccel::thread_data1_req_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_218_p2.read(), ap_const_lv1_0))) {
        data1_req_write = ap_const_logic_1;
    } else {
        data1_req_write = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data1_rsp_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()))) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         (!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        data1_rsp_read = ap_const_logic_1;
    } else {
        data1_rsp_read = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data1_size() {
    data1_size = ap_const_lv32_4;
}

void myFuncAccel::thread_data2_address() {
    data2_address = data2_addr_reg_477.read();
}

void myFuncAccel::thread_data2_dataout() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read())))) {
        data2_dataout = ap_const_lv32_0;
    } else if (((esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) || 
                (esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())))) {
        data2_dataout = reg_200.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                 esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())))) {
        data2_dataout = reg_187.read();
    } else {
        data2_dataout = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_data2_req_din() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) || 
         (esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) || 
         (esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter_fu_463_p2.read())))) {
        data2_req_din = ap_const_logic_1;
    } else {
        data2_req_din = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data2_req_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) || 
         (esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) || 
         (esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter_fu_463_p2.read())))) {
        data2_req_write = ap_const_logic_1;
    } else {
        data2_req_write = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data2_rsp_read() {
    data2_rsp_read = ap_const_logic_0;
}

void myFuncAccel::thread_data2_size() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, is_0iter_fu_463_p2.read()))) {
        data2_size = tmp_25_cast_reg_594.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1))) {
        data2_size = ap_const_lv32_4;
    } else {
        data2_size = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_exitcond1_fu_218_p2() {
    exitcond1_fu_218_p2 = (!i_reg_129.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_129.read() == ap_const_lv10_3E8);
}

void myFuncAccel::thread_exitcond_fu_452_p2() {
    exitcond_fu_452_p2 = (!l_2_cast_fu_448_p1.read().is_01() || !r_1_cast_cast_reg_589.read().is_01())? sc_lv<1>(): sc_lv<1>(l_2_cast_fu_448_p1.read() == r_1_cast_cast_reg_589.read());
}

void myFuncAccel::thread_grp_fu_151_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        grp_fu_151_ce = ap_const_logic_0;
    } else {
        grp_fu_151_ce = ap_const_logic_1;
    }
}

void myFuncAccel::thread_grp_fu_151_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        grp_fu_151_p0 = tempVal_1_3_reg_543.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        grp_fu_151_p0 = reg_213.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        grp_fu_151_p0 = reg_207.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        grp_fu_151_p0 = reg_200.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_fu_151_p0 = reg_194.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        grp_fu_151_p0 = reg_187.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_151_p0 = reg_181.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_151_p0 = reg_175.read();
    } else {
        grp_fu_151_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_grp_fu_151_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        grp_fu_151_p1 = reg_207.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        grp_fu_151_p1 = reg_194.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        grp_fu_151_p1 = reg_181.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        grp_fu_151_p1 = reg_175.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        grp_fu_151_p1 = ap_const_lv32_0;
    } else {
        grp_fu_151_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_grp_fu_156_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         ((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || 
           esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         ((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || 
           esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) || 
         ((esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || 
           esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        grp_fu_156_ce = ap_const_logic_0;
    } else {
        grp_fu_156_ce = ap_const_logic_1;
    }
}

void myFuncAccel::thread_grp_fu_156_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        grp_fu_156_p0 = data0_read_11_reg_538.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        grp_fu_156_p0 = data0_read_7_reg_528.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_156_p0 = data0_read_10_reg_533.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_156_p0 = data0_read_3_reg_508.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_156_p0 = data0_read_6_reg_523.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_156_p0 = data0_read_2_reg_498.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_156_p0 = data0_read_5_reg_518.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        grp_fu_156_p0 = reg_170.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        grp_fu_156_p0 = reg_165.read();
    } else {
        grp_fu_156_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_grp_fu_156_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        grp_fu_156_p1 = data1_addr_read_3_reg_513.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        grp_fu_156_p1 = data1_addr_read_2_reg_503.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        grp_fu_156_p1 = data1_addr_read_1_reg_493.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        grp_fu_156_p1 = data1_addr_read_reg_488.read();
    } else {
        grp_fu_156_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_grp_fu_160_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        grp_fu_160_p0 = reg_200.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        grp_fu_160_p0 = reg_187.read();
    } else {
        grp_fu_160_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_i_1_fu_224_p2() {
    i_1_fu_224_p2 = (!i_reg_129.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_129.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void myFuncAccel::thread_is_0iter_fu_463_p2() {
    is_0iter_fu_463_p2 = (!l_2_reg_140.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(l_2_reg_140.read() == ap_const_lv3_0);
}

void myFuncAccel::thread_l_2_cast_fu_448_p1() {
    l_2_cast_fu_448_p1 = esl_zext<4,3>(l_2_reg_140.read());
}

void myFuncAccel::thread_l_fu_457_p2() {
    l_fu_457_p2 = (!l_2_reg_140.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(l_2_reg_140.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void myFuncAccel::thread_notlhs1_fu_360_p2() {
    notlhs1_fu_360_p2 = (!tmp_13_fu_346_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_13_fu_346_p4.read() != ap_const_lv8_FF);
}

void myFuncAccel::thread_notlhs2_fu_399_p2() {
    notlhs2_fu_399_p2 = (!tmp_18_fu_385_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_18_fu_385_p4.read() != ap_const_lv8_FF);
}

void myFuncAccel::thread_notlhs8_fu_312_p2() {
    notlhs8_fu_312_p2 = (!tmp_s_fu_298_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_s_fu_298_p4.read() != ap_const_lv8_FF);
}

void myFuncAccel::thread_notlhs_fu_273_p2() {
    notlhs_fu_273_p2 = (!tmp_5_fu_259_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_259_p4.read() != ap_const_lv8_FF);
}

void myFuncAccel::thread_notrhs1_fu_366_p2() {
    notrhs1_fu_366_p2 = (!tmp_14_fu_356_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_14_fu_356_p1.read() == ap_const_lv23_0);
}

void myFuncAccel::thread_notrhs2_fu_405_p2() {
    notrhs2_fu_405_p2 = (!tmp_19_fu_395_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_19_fu_395_p1.read() == ap_const_lv23_0);
}

void myFuncAccel::thread_notrhs9_fu_318_p2() {
    notrhs9_fu_318_p2 = (!tmp_6_fu_308_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_308_p1.read() == ap_const_lv23_0);
}

void myFuncAccel::thread_notrhs_fu_279_p2() {
    notrhs_fu_279_p2 = (!tmp_2_fu_269_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_269_p1.read() == ap_const_lv23_0);
}

void myFuncAccel::thread_or_cond2_fu_429_p2() {
    or_cond2_fu_429_p2 = (tmp2_fu_423_p2.read() & tmp1_reg_563.read());
}

void myFuncAccel::thread_r_1_cast_cast_fu_434_p3() {
    r_1_cast_cast_fu_434_p3 = (!or_cond2_reg_583.read()[0].is_01())? sc_lv<4>(): ((or_cond2_reg_583.read()[0].to_bool())? ap_const_lv4_4: ap_const_lv4_0);
}

void myFuncAccel::thread_tempVal_1_0_3_to_int_fu_255_p1() {
    tempVal_1_0_3_to_int_fu_255_p1 = reg_187.read();
}

void myFuncAccel::thread_tempVal_1_1_3_to_int_fu_294_p1() {
    tempVal_1_1_3_to_int_fu_294_p1 = reg_200.read();
}

void myFuncAccel::thread_tempVal_1_2_3_to_int_fu_342_p1() {
    tempVal_1_2_3_to_int_fu_342_p1 = reg_200.read();
}

void myFuncAccel::thread_tempVal_1_3_3_to_int_fu_381_p1() {
    tempVal_1_3_3_to_int_fu_381_p1 = reg_187.read();
}

void myFuncAccel::thread_tmp1_fu_336_p2() {
    tmp1_fu_336_p2 = (tmp_9_fu_289_p2.read() & tmp_12_fu_330_p2.read());
}

void myFuncAccel::thread_tmp2_fu_423_p2() {
    tmp2_fu_423_p2 = (tmp_17_fu_376_p2.read() & tmp_22_fu_417_p2.read());
}

void myFuncAccel::thread_tmp_10_fu_324_p2() {
    tmp_10_fu_324_p2 = (notrhs9_fu_318_p2.read() | notlhs8_fu_312_p2.read());
}

void myFuncAccel::thread_tmp_12_fu_330_p2() {
    tmp_12_fu_330_p2 = (tmp_10_fu_324_p2.read() & grp_fu_160_p2.read());
}

void myFuncAccel::thread_tmp_13_fu_346_p4() {
    tmp_13_fu_346_p4 = tempVal_1_2_3_to_int_fu_342_p1.read().range(30, 23);
}

void myFuncAccel::thread_tmp_14_fu_356_p1() {
    tmp_14_fu_356_p1 = tempVal_1_2_3_to_int_fu_342_p1.read().range(23-1, 0);
}

void myFuncAccel::thread_tmp_15_fu_372_p2() {
    tmp_15_fu_372_p2 = (notrhs1_reg_573.read() | notlhs1_reg_568.read());
}

void myFuncAccel::thread_tmp_17_fu_376_p2() {
    tmp_17_fu_376_p2 = (tmp_15_fu_372_p2.read() & tmp_16_reg_578.read());
}

void myFuncAccel::thread_tmp_18_fu_385_p4() {
    tmp_18_fu_385_p4 = tempVal_1_3_3_to_int_fu_381_p1.read().range(30, 23);
}

void myFuncAccel::thread_tmp_19_fu_395_p1() {
    tmp_19_fu_395_p1 = tempVal_1_3_3_to_int_fu_381_p1.read().range(23-1, 0);
}

void myFuncAccel::thread_tmp_20_fu_411_p2() {
    tmp_20_fu_411_p2 = (notrhs2_fu_405_p2.read() | notlhs2_fu_399_p2.read());
}

void myFuncAccel::thread_tmp_22_fu_417_p2() {
    tmp_22_fu_417_p2 = (tmp_20_fu_411_p2.read() & grp_fu_160_p2.read());
}

void myFuncAccel::thread_tmp_25_cast_fu_441_p3() {
    tmp_25_cast_fu_441_p3 = (!or_cond2_reg_583.read()[0].is_01())? sc_lv<32>(): ((or_cond2_reg_583.read()[0].to_bool())? ap_const_lv32_4: ap_const_lv32_0);
}

void myFuncAccel::thread_tmp_2_fu_269_p1() {
    tmp_2_fu_269_p1 = tempVal_1_0_3_to_int_fu_255_p1.read().range(23-1, 0);
}

void myFuncAccel::thread_tmp_3_fu_238_p1() {
    tmp_3_fu_238_p1 = esl_zext<64,12>(tmp_fu_230_p3.read());
}

void myFuncAccel::thread_tmp_5_fu_259_p4() {
    tmp_5_fu_259_p4 = tempVal_1_0_3_to_int_fu_255_p1.read().range(30, 23);
}

void myFuncAccel::thread_tmp_6_fu_308_p1() {
    tmp_6_fu_308_p1 = tempVal_1_1_3_to_int_fu_294_p1.read().range(23-1, 0);
}

void myFuncAccel::thread_tmp_7_fu_285_p2() {
    tmp_7_fu_285_p2 = (notrhs_reg_553.read() | notlhs_reg_548.read());
}

void myFuncAccel::thread_tmp_9_fu_289_p2() {
    tmp_9_fu_289_p2 = (tmp_7_fu_285_p2.read() & tmp_8_reg_558.read());
}

void myFuncAccel::thread_tmp_fu_230_p3() {
    tmp_fu_230_p3 = esl_concat<10,2>(i_reg_129.read(), ap_const_lv2_0);
}

void myFuncAccel::thread_tmp_s_fu_298_p4() {
    tmp_s_fu_298_p4 = tempVal_1_1_3_to_int_fu_294_p1.read().range(30, 23);
}

void myFuncAccel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_218_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_0, data0_rsp_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            if ((esl_seteq<1,1,1>(data0_rsp_empty_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
                ap_NS_fsm = ap_ST_fsm_state32;
            } else {
                ap_NS_fsm = ap_ST_fsm_state31;
            }
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
                ap_NS_fsm = ap_ST_fsm_state34;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            if ((esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
                ap_NS_fsm = ap_ST_fsm_state38;
            } else {
                ap_NS_fsm = ap_ST_fsm_state37;
            }
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            if ((esl_seteq<1,1,1>(data2_req_full_n.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
                ap_NS_fsm = ap_ST_fsm_state42;
            } else {
                ap_NS_fsm = ap_ST_fsm_state41;
            }
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read())) && esl_seteq<1,1,1>(exitcond_fu_452_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_452_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state43;
            } else {
                ap_NS_fsm = ap_ST_fsm_state43;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<43>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void myFuncAccel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"size\" :  \"" << size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dim\" :  \"" << dim.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"threshold\" :  \"" << threshold.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_req_din\" :  \"" << data0_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_req_full_n\" :  \"" << data0_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_req_write\" :  \"" << data0_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_rsp_empty_n\" :  \"" << data0_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_rsp_read\" :  \"" << data0_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_address\" :  \"" << data0_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_datain\" :  \"" << data0_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_dataout\" :  \"" << data0_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_size\" :  \"" << data0_size.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_req_din\" :  \"" << data1_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_req_full_n\" :  \"" << data1_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_req_write\" :  \"" << data1_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_rsp_empty_n\" :  \"" << data1_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_rsp_read\" :  \"" << data1_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_address\" :  \"" << data1_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_datain\" :  \"" << data1_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_dataout\" :  \"" << data1_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_size\" :  \"" << data1_size.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_req_din\" :  \"" << data2_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_req_full_n\" :  \"" << data2_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_req_write\" :  \"" << data2_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_rsp_empty_n\" :  \"" << data2_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_rsp_read\" :  \"" << data2_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_address\" :  \"" << data2_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_datain\" :  \"" << data2_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_dataout\" :  \"" << data2_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_size\" :  \"" << data2_size.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

