// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myFuncAccel,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1172,HLS_SYN_LUT=1568,HLS_VERSION=2018_3}" *)

module myFuncAccel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size,
        dim,
        threshold,
        data0_req_din,
        data0_req_full_n,
        data0_req_write,
        data0_rsp_empty_n,
        data0_rsp_read,
        data0_address,
        data0_datain,
        data0_dataout,
        data0_size,
        data1_req_din,
        data1_req_full_n,
        data1_req_write,
        data1_rsp_empty_n,
        data1_rsp_read,
        data1_address,
        data1_datain,
        data1_dataout,
        data1_size,
        data2_req_din,
        data2_req_full_n,
        data2_req_write,
        data2_rsp_empty_n,
        data2_rsp_read,
        data2_address,
        data2_datain,
        data2_dataout,
        data2_size
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] size;
input  [31:0] dim;
input  [31:0] threshold;
output   data0_req_din;
input   data0_req_full_n;
output   data0_req_write;
input   data0_rsp_empty_n;
output   data0_rsp_read;
output  [31:0] data0_address;
input  [31:0] data0_datain;
output  [31:0] data0_dataout;
output  [31:0] data0_size;
output   data1_req_din;
input   data1_req_full_n;
output   data1_req_write;
input   data1_rsp_empty_n;
output   data1_rsp_read;
output  [31:0] data1_address;
input  [31:0] data1_datain;
output  [31:0] data1_dataout;
output  [31:0] data1_size;
output   data2_req_din;
input   data2_req_full_n;
output   data2_req_write;
input   data2_rsp_empty_n;
output   data2_rsp_read;
output  [31:0] data2_address;
input  [31:0] data2_datain;
output  [31:0] data2_dataout;
output  [31:0] data2_size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data0_req_write;
reg data0_rsp_read;
reg data1_req_write;
reg data1_rsp_read;
reg data2_req_din;
reg data2_req_write;
reg[31:0] data2_dataout;
reg[31:0] data2_size;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_165;
wire    ap_CS_fsm_state4;
reg    ap_block_state4;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state31;
reg   [31:0] reg_170;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] reg_175;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state35;
reg   [31:0] reg_181;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_151_p2;
reg   [31:0] reg_187;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state40;
reg   [31:0] reg_194;
reg   [31:0] reg_200;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state36;
reg   [31:0] reg_207;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
reg   [31:0] reg_213;
wire   [9:0] i_1_fu_224_p2;
reg   [9:0] i_1_reg_472;
wire    ap_CS_fsm_state2;
reg   [31:0] data2_addr_reg_477;
wire   [0:0] exitcond1_fu_218_p2;
reg   [31:0] data1_addr_read_reg_488;
reg   [31:0] data1_addr_read_1_reg_493;
reg   [31:0] data0_read_2_reg_498;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
reg   [31:0] data1_addr_read_2_reg_503;
reg   [31:0] data0_read_3_reg_508;
wire    ap_CS_fsm_state7;
reg    ap_block_state7;
reg   [31:0] data1_addr_read_3_reg_513;
reg   [31:0] data0_read_5_reg_518;
wire    ap_CS_fsm_state9;
reg   [31:0] data0_read_6_reg_523;
wire    ap_CS_fsm_state10;
reg   [31:0] data0_read_7_reg_528;
wire    ap_CS_fsm_state11;
reg   [31:0] data0_read_10_reg_533;
wire    ap_CS_fsm_state14;
reg   [31:0] data0_read_11_reg_538;
wire    ap_CS_fsm_state15;
reg   [31:0] tempVal_1_3_reg_543;
wire   [0:0] notlhs_fu_273_p2;
reg   [0:0] notlhs_reg_548;
wire    ap_CS_fsm_state29;
wire   [0:0] notrhs_fu_279_p2;
reg   [0:0] notrhs_reg_553;
wire   [0:0] grp_fu_160_p2;
reg   [0:0] tmp_8_reg_558;
wire   [0:0] tmp1_fu_336_p2;
reg   [0:0] tmp1_reg_563;
wire    ap_CS_fsm_state33;
wire   [0:0] notlhs1_fu_360_p2;
reg   [0:0] notlhs1_reg_568;
wire    ap_CS_fsm_state37;
wire   [0:0] notrhs1_fu_366_p2;
reg   [0:0] notrhs1_reg_573;
reg   [0:0] tmp_16_reg_578;
wire   [0:0] or_cond2_fu_429_p2;
reg   [0:0] or_cond2_reg_583;
wire    ap_CS_fsm_state41;
wire   [3:0] r_1_cast_cast_fu_434_p3;
reg   [3:0] r_1_cast_cast_reg_589;
wire    ap_CS_fsm_state42;
wire   [31:0] tmp_25_cast_fu_441_p3;
reg   [31:0] tmp_25_cast_reg_594;
wire   [2:0] l_fu_457_p2;
wire    ap_CS_fsm_state43;
wire   [0:0] exitcond_fu_452_p2;
reg    ap_block_state43;
reg   [9:0] i_reg_129;
reg   [2:0] l_2_reg_140;
wire   [63:0] tmp_3_fu_238_p1;
wire   [0:0] is_0iter_fu_463_p2;
reg   [31:0] grp_fu_151_p0;
reg   [31:0] grp_fu_151_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
reg   [31:0] grp_fu_156_p0;
reg   [31:0] grp_fu_156_p1;
reg   [31:0] grp_fu_160_p0;
wire   [11:0] tmp_fu_230_p3;
wire   [31:0] tempVal_1_0_3_to_int_fu_255_p1;
wire   [7:0] tmp_5_fu_259_p4;
wire   [22:0] tmp_2_fu_269_p1;
wire   [0:0] tmp_7_fu_285_p2;
wire   [31:0] tempVal_1_1_3_to_int_fu_294_p1;
wire   [7:0] tmp_s_fu_298_p4;
wire   [22:0] tmp_6_fu_308_p1;
wire   [0:0] notrhs9_fu_318_p2;
wire   [0:0] notlhs8_fu_312_p2;
wire   [0:0] tmp_10_fu_324_p2;
wire   [0:0] tmp_9_fu_289_p2;
wire   [0:0] tmp_12_fu_330_p2;
wire   [31:0] tempVal_1_2_3_to_int_fu_342_p1;
wire   [7:0] tmp_13_fu_346_p4;
wire   [22:0] tmp_14_fu_356_p1;
wire   [0:0] tmp_15_fu_372_p2;
wire   [31:0] tempVal_1_3_3_to_int_fu_381_p1;
wire   [7:0] tmp_18_fu_385_p4;
wire   [22:0] tmp_19_fu_395_p1;
wire   [0:0] notrhs2_fu_405_p2;
wire   [0:0] notlhs2_fu_399_p2;
wire   [0:0] tmp_20_fu_411_p2;
wire   [0:0] tmp_17_fu_376_p2;
wire   [0:0] tmp_22_fu_417_p2;
wire   [0:0] tmp2_fu_423_p2;
wire   [3:0] l_2_cast_fu_448_p1;
reg    grp_fu_151_ce;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state3;
reg    grp_fu_156_ce;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
end

myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_151_p0),
    .din1(grp_fu_151_p1),
    .ce(grp_fu_151_ce),
    .dout(grp_fu_151_p2)
);

myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_156_p0),
    .din1(grp_fu_156_p1),
    .ce(grp_fu_156_ce),
    .dout(grp_fu_156_p2)
);

myFuncAccel_fcmp_32ns_32ns_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel_fcmp_32ns_32ns_1_1_1_U3(
    .din0(grp_fu_160_p0),
    .din1(32'd1120403456),
    .opcode(5'd2),
    .dout(grp_fu_160_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (exitcond_fu_452_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        i_reg_129 <= i_1_reg_472;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_129 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (exitcond_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        l_2_reg_140 <= l_fu_457_p2;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        l_2_reg_140 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        data0_read_10_reg_533 <= data0_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        data0_read_11_reg_538 <= data0_datain;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        data0_read_2_reg_498 <= data0_datain;
        data1_addr_read_2_reg_503 <= data1_datain;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        data0_read_3_reg_508 <= data0_datain;
        data1_addr_read_3_reg_513 <= data1_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        data0_read_5_reg_518 <= data0_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        data0_read_6_reg_523 <= data0_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        data0_read_7_reg_528 <= data0_datain;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        data1_addr_read_1_reg_493 <= data1_datain;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        data1_addr_read_reg_488 <= data1_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data2_addr_reg_477[11 : 2] <= tmp_3_fu_238_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_472 <= i_1_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        notlhs1_reg_568 <= notlhs1_fu_360_p2;
        notrhs1_reg_573 <= notrhs1_fu_366_p2;
        tmp_16_reg_578 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        notlhs_reg_548 <= notlhs_fu_273_p2;
        notrhs_reg_553 <= notrhs_fu_279_p2;
        tmp_8_reg_558 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        or_cond2_reg_583 <= or_cond2_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        r_1_cast_cast_reg_589[2] <= r_1_cast_cast_fu_434_p3[2];
        tmp_25_cast_reg_594[2] <= tmp_25_cast_fu_441_p3[2];
    end
end

always @ (posedge ap_clk) begin
    if ((((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_165 <= data0_datain;
    end
end

always @ (posedge ap_clk) begin
    if ((((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_170 <= data0_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        reg_175 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state17) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        reg_181 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)))) begin
        reg_187 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        reg_194 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_200 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_207 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state21)))) begin
        reg_213 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tempVal_1_3_reg_543 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        tmp1_reg_563 <= tmp1_fu_336_p2;
    end
end

always @ (*) begin
    if (((exitcond1_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data0_req_write = 1'b1;
    end else begin
        data0_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        data0_rsp_read = 1'b1;
    end else begin
        data0_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data1_req_write = 1'b1;
    end else begin
        data1_req_write = 1'b0;
    end
end

always @ (*) begin
    if (((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        data1_rsp_read = 1'b1;
    end else begin
        data1_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (exitcond_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        data2_dataout = 32'd0;
    end else if ((((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state33)))) begin
        data2_dataout = reg_200;
    end else if ((((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
        data2_dataout = reg_187;
    end else begin
        data2_dataout = 'bx;
    end
end

always @ (*) begin
    if (((~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (is_0iter_fu_463_p2 == 1'd1) & (exitcond_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43)) | (~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (exitcond_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
        data2_req_din = 1'b1;
    end else begin
        data2_req_din = 1'b0;
    end
end

always @ (*) begin
    if (((~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (is_0iter_fu_463_p2 == 1'd1) & (exitcond_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43)) | (~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (exitcond_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
        data2_req_write = 1'b1;
    end else begin
        data2_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (is_0iter_fu_463_p2 == 1'd1) & (exitcond_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        data2_size = tmp_25_cast_reg_594;
    end else if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        data2_size = 32'd4;
    end else begin
        data2_size = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | ((data2_req_full_n == 1'b0) & (1'b1 == ap_CS_fsm_state37)) | ((data2_req_full_n == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((data2_req_full_n == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state11)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state21)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state12)))) begin
        grp_fu_151_ce = 1'b0;
    end else begin
        grp_fu_151_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_151_p0 = tempVal_1_3_reg_543;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_151_p0 = reg_213;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_151_p0 = reg_207;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_151_p0 = reg_200;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_151_p0 = reg_194;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_fu_151_p0 = reg_187;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_151_p0 = reg_181;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_151_p0 = reg_175;
    end else begin
        grp_fu_151_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_151_p1 = reg_207;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_151_p1 = reg_194;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_151_p1 = reg_181;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31))) begin
        grp_fu_151_p1 = reg_175;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_151_p1 = 32'd0;
    end else begin
        grp_fu_151_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state4) | ((data2_req_full_n == 1'b0) & (1'b1 == ap_CS_fsm_state33)) | ((data2_req_full_n == 1'b0) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == ap_CS_fsm_state7) & ((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0))) | ((1'b1 == ap_CS_fsm_state6) & ((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0))) | ((1'b1 == ap_CS_fsm_state5) & ((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0))) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state14)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state11)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state10)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state9)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state13)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state31)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state21)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state16)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state12)) | ((data0_rsp_empty_n == 1'b0) & (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_156_ce = 1'b0;
    end else begin
        grp_fu_156_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_156_p0 = data0_read_11_reg_538;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_156_p0 = data0_read_7_reg_528;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_156_p0 = data0_read_10_reg_533;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_156_p0 = data0_read_3_reg_508;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_156_p0 = data0_read_6_reg_523;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_156_p0 = data0_read_2_reg_498;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_156_p0 = data0_read_5_reg_518;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_156_p0 = reg_170;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_156_p0 = reg_165;
    end else begin
        grp_fu_156_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28))) begin
        grp_fu_156_p1 = data1_addr_read_3_reg_513;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_156_p1 = data1_addr_read_2_reg_503;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_156_p1 = data1_addr_read_1_reg_493;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_156_p1 = data1_addr_read_reg_488;
    end else begin
        grp_fu_156_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state33))) begin
        grp_fu_160_p0 = reg_200;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_160_p0 = reg_187;
    end else begin
        grp_fu_160_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((data0_rsp_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((data2_req_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if ((~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (exitcond_fu_452_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0)) & (exitcond_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state4 = ((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state43 = ((data2_req_full_n == 1'b0) & (exitcond_fu_452_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state5 = ((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((data1_rsp_empty_n == 1'b0) | (data0_rsp_empty_n == 1'b0));
end

assign data0_address = 32'd0;

assign data0_dataout = 32'd0;

assign data0_req_din = 1'b0;

assign data0_size = 32'd16;

assign data1_address = tmp_3_fu_238_p1;

assign data1_dataout = 32'd0;

assign data1_req_din = 1'b0;

assign data1_size = 32'd4;

assign data2_address = data2_addr_reg_477;

assign data2_rsp_read = 1'b0;

assign exitcond1_fu_218_p2 = ((i_reg_129 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond_fu_452_p2 = ((l_2_cast_fu_448_p1 == r_1_cast_cast_reg_589) ? 1'b1 : 1'b0);

assign i_1_fu_224_p2 = (i_reg_129 + 10'd1);

assign is_0iter_fu_463_p2 = ((l_2_reg_140 == 3'd0) ? 1'b1 : 1'b0);

assign l_2_cast_fu_448_p1 = l_2_reg_140;

assign l_fu_457_p2 = (l_2_reg_140 + 3'd1);

assign notlhs1_fu_360_p2 = ((tmp_13_fu_346_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs2_fu_399_p2 = ((tmp_18_fu_385_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs8_fu_312_p2 = ((tmp_s_fu_298_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_273_p2 = ((tmp_5_fu_259_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_366_p2 = ((tmp_14_fu_356_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_405_p2 = ((tmp_19_fu_395_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs9_fu_318_p2 = ((tmp_6_fu_308_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_279_p2 = ((tmp_2_fu_269_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond2_fu_429_p2 = (tmp2_fu_423_p2 & tmp1_reg_563);

assign r_1_cast_cast_fu_434_p3 = ((or_cond2_reg_583[0:0] === 1'b1) ? 4'd4 : 4'd0);

assign tempVal_1_0_3_to_int_fu_255_p1 = reg_187;

assign tempVal_1_1_3_to_int_fu_294_p1 = reg_200;

assign tempVal_1_2_3_to_int_fu_342_p1 = reg_200;

assign tempVal_1_3_3_to_int_fu_381_p1 = reg_187;

assign tmp1_fu_336_p2 = (tmp_9_fu_289_p2 & tmp_12_fu_330_p2);

assign tmp2_fu_423_p2 = (tmp_22_fu_417_p2 & tmp_17_fu_376_p2);

assign tmp_10_fu_324_p2 = (notrhs9_fu_318_p2 | notlhs8_fu_312_p2);

assign tmp_12_fu_330_p2 = (tmp_10_fu_324_p2 & grp_fu_160_p2);

assign tmp_13_fu_346_p4 = {{tempVal_1_2_3_to_int_fu_342_p1[30:23]}};

assign tmp_14_fu_356_p1 = tempVal_1_2_3_to_int_fu_342_p1[22:0];

assign tmp_15_fu_372_p2 = (notrhs1_reg_573 | notlhs1_reg_568);

assign tmp_17_fu_376_p2 = (tmp_16_reg_578 & tmp_15_fu_372_p2);

assign tmp_18_fu_385_p4 = {{tempVal_1_3_3_to_int_fu_381_p1[30:23]}};

assign tmp_19_fu_395_p1 = tempVal_1_3_3_to_int_fu_381_p1[22:0];

assign tmp_20_fu_411_p2 = (notrhs2_fu_405_p2 | notlhs2_fu_399_p2);

assign tmp_22_fu_417_p2 = (tmp_20_fu_411_p2 & grp_fu_160_p2);

assign tmp_25_cast_fu_441_p3 = ((or_cond2_reg_583[0:0] === 1'b1) ? 32'd4 : 32'd0);

assign tmp_2_fu_269_p1 = tempVal_1_0_3_to_int_fu_255_p1[22:0];

assign tmp_3_fu_238_p1 = tmp_fu_230_p3;

assign tmp_5_fu_259_p4 = {{tempVal_1_0_3_to_int_fu_255_p1[30:23]}};

assign tmp_6_fu_308_p1 = tempVal_1_1_3_to_int_fu_294_p1[22:0];

assign tmp_7_fu_285_p2 = (notrhs_reg_553 | notlhs_reg_548);

assign tmp_9_fu_289_p2 = (tmp_8_reg_558 & tmp_7_fu_285_p2);

assign tmp_fu_230_p3 = {{i_reg_129}, {2'd0}};

assign tmp_s_fu_298_p4 = {{tempVal_1_1_3_to_int_fu_294_p1[30:23]}};

always @ (posedge ap_clk) begin
    data2_addr_reg_477[1:0] <= 2'b00;
    data2_addr_reg_477[31:12] <= 20'b00000000000000000000;
    r_1_cast_cast_reg_589[1:0] <= 2'b00;
    r_1_cast_cast_reg_589[3] <= 1'b0;
    tmp_25_cast_reg_594[1:0] <= 2'b00;
    tmp_25_cast_reg_594[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //myFuncAccel
