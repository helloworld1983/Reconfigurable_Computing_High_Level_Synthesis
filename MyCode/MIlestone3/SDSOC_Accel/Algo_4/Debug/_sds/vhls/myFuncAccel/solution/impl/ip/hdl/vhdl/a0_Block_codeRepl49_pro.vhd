-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_Block_codeRepl49_pro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_empty_n : IN STD_LOGIC;
    data0_read : OUT STD_LOGIC;
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_out_full_n : IN STD_LOGIC;
    size_out_write : OUT STD_LOGIC;
    threshold_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    threshold_out_full_n : IN STD_LOGIC;
    threshold_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of a0_Block_codeRepl49_pro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal size_out_blk_n : STD_LOGIC;
    signal threshold_out_blk_n : STD_LOGIC;
    signal data0_read_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal data0_read_1_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_2_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_3_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_4_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_5_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_6_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_7_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_8_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_9_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_10_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_11_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_12_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_13_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_read_14_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state16 : BOOLEAN;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_0_preg <= data0_read_reg_173;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_10_preg <= data0_read_10_reg_223;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_11_preg <= data0_read_11_reg_228;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_12_preg <= data0_read_12_reg_233;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_13_preg <= data0_read_13_reg_238;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_14_preg <= data0_read_14_reg_243;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_15_preg <= data0_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_1_preg <= data0_read_1_reg_178;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_2_preg <= data0_read_2_reg_183;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_3_preg <= data0_read_3_reg_188;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_4_preg <= data0_read_4_reg_193;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_5_preg <= data0_read_5_reg_198;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_6_preg <= data0_read_6_reg_203;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_7_preg <= data0_read_7_reg_208;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_8_preg <= data0_read_8_reg_213;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv32_0;
            else
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    ap_return_9_preg <= data0_read_9_reg_218;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                data0_read_10_reg_223 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                data0_read_11_reg_228 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                data0_read_12_reg_233 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                data0_read_13_reg_238 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                data0_read_14_reg_243 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                data0_read_1_reg_178 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                data0_read_2_reg_183 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                data0_read_3_reg_188 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                data0_read_4_reg_193 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                data0_read_5_reg_198 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                data0_read_6_reg_203 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                data0_read_7_reg_208 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                data0_read_8_reg_213 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                data0_read_9_reg_218 <= data0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data0_read_reg_173 <= data0_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((data0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, data0_empty_n)
    begin
                ap_block_state1 <= ((data0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state16_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n)
    begin
                ap_block_state16 <= ((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_reg_173, ap_return_0_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_0 <= data0_read_reg_173;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_1_reg_178, ap_return_1_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_1 <= data0_read_1_reg_178;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_10_reg_223, ap_return_10_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_10 <= data0_read_10_reg_223;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_11_reg_228, ap_return_11_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_11 <= data0_read_11_reg_228;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_12_reg_233, ap_return_12_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_12 <= data0_read_12_reg_233;
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_13_reg_238, ap_return_13_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_13 <= data0_read_13_reg_238;
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_14_reg_243, ap_return_14_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_14 <= data0_read_14_reg_243;
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_15_assign_proc : process(data0_dout, data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, ap_return_15_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_15 <= data0_dout;
        else 
            ap_return_15 <= ap_return_15_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_2_reg_183, ap_return_2_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_2 <= data0_read_2_reg_183;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_3_reg_188, ap_return_3_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_3 <= data0_read_3_reg_188;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_4_reg_193, ap_return_4_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_4 <= data0_read_4_reg_193;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_5_reg_198, ap_return_5_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_5 <= data0_read_5_reg_198;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_6_reg_203, ap_return_6_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_6 <= data0_read_6_reg_203;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_7_reg_208, ap_return_7_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_7 <= data0_read_7_reg_208;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_8_reg_213, ap_return_8_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_8 <= data0_read_8_reg_213;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16, data0_read_9_reg_218, ap_return_9_preg)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_return_9 <= data0_read_9_reg_218;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;


    data0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data0_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data0_blk_n <= data0_empty_n;
        else 
            data0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data0_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((data0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((data0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            data0_read <= ap_const_logic_1;
        else 
            data0_read <= ap_const_logic_0;
        end if; 
    end process;


    size_out_blk_n_assign_proc : process(size_out_full_n, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            size_out_blk_n <= size_out_full_n;
        else 
            size_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_out_din <= size;

    size_out_write_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            size_out_write <= ap_const_logic_1;
        else 
            size_out_write <= ap_const_logic_0;
        end if; 
    end process;


    threshold_out_blk_n_assign_proc : process(threshold_out_full_n, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            threshold_out_blk_n <= threshold_out_full_n;
        else 
            threshold_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    threshold_out_din <= threshold;

    threshold_out_write_assign_proc : process(data0_empty_n, size_out_full_n, threshold_out_full_n, ap_CS_fsm_state16)
    begin
        if ((not(((threshold_out_full_n = ap_const_logic_0) or (size_out_full_n = ap_const_logic_0) or (data0_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            threshold_out_write <= ap_const_logic_1;
        else 
            threshold_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
