// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_Block_codeRepl49_pro.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a0_Block_codeRepl49_pro::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a0_Block_codeRepl49_pro::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state1 = "1";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state2 = "10";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state3 = "100";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state4 = "1000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state5 = "10000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state6 = "100000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> a0_Block_codeRepl49_pro::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_1 = "1";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_2 = "10";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_3 = "11";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_4 = "100";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_5 = "101";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_6 = "110";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_7 = "111";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_8 = "1000";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_9 = "1001";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_A = "1010";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_B = "1011";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_C = "1100";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_D = "1101";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_E = "1110";
const sc_lv<32> a0_Block_codeRepl49_pro::ap_const_lv32_F = "1111";
const bool a0_Block_codeRepl49_pro::ap_const_boolean_1 = true;

a0_Block_codeRepl49_pro::a0_Block_codeRepl49_pro(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( data0_empty_n );

    SC_METHOD(thread_ap_block_state16);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_reg_173 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_1_reg_178 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_10_reg_223 );
    sensitive << ( ap_return_10_preg );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_11_reg_228 );
    sensitive << ( ap_return_11_preg );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_12_reg_233 );
    sensitive << ( ap_return_12_preg );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_13_reg_238 );
    sensitive << ( ap_return_13_preg );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_14_reg_243 );
    sensitive << ( ap_return_14_preg );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( data0_dout );
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_return_15_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_2_reg_183 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_3_reg_188 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_4_reg_193 );
    sensitive << ( ap_return_4_preg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_5_reg_198 );
    sensitive << ( ap_return_5_preg );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_6_reg_203 );
    sensitive << ( ap_return_6_preg );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_7_reg_208 );
    sensitive << ( ap_return_7_preg );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_8_reg_213 );
    sensitive << ( ap_return_8_preg );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( data0_read_9_reg_218 );
    sensitive << ( ap_return_9_preg );

    SC_METHOD(thread_data0_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data0_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_data0_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_size_out_blk_n);
    sensitive << ( size_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_size_out_din);
    sensitive << ( data0_empty_n );
    sensitive << ( size );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_size_out_write);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_threshold_out_blk_n);
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_threshold_out_din);
    sensitive << ( data0_empty_n );
    sensitive << ( threshold );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_threshold_out_write);
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data0_empty_n );
    sensitive << ( size_out_full_n );
    sensitive << ( threshold_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000000001";
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    ap_return_2_preg = "00000000000000000000000000000000";
    ap_return_3_preg = "00000000000000000000000000000000";
    ap_return_4_preg = "00000000000000000000000000000000";
    ap_return_5_preg = "00000000000000000000000000000000";
    ap_return_6_preg = "00000000000000000000000000000000";
    ap_return_7_preg = "00000000000000000000000000000000";
    ap_return_8_preg = "00000000000000000000000000000000";
    ap_return_9_preg = "00000000000000000000000000000000";
    ap_return_10_preg = "00000000000000000000000000000000";
    ap_return_11_preg = "00000000000000000000000000000000";
    ap_return_12_preg = "00000000000000000000000000000000";
    ap_return_13_preg = "00000000000000000000000000000000";
    ap_return_14_preg = "00000000000000000000000000000000";
    ap_return_15_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_Block_codeRepl49_pro_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data0_dout, "(port)data0_dout");
    sc_trace(mVcdFile, data0_empty_n, "(port)data0_empty_n");
    sc_trace(mVcdFile, data0_read, "(port)data0_read");
    sc_trace(mVcdFile, size, "(port)size");
    sc_trace(mVcdFile, threshold, "(port)threshold");
    sc_trace(mVcdFile, size_out_din, "(port)size_out_din");
    sc_trace(mVcdFile, size_out_full_n, "(port)size_out_full_n");
    sc_trace(mVcdFile, size_out_write, "(port)size_out_write");
    sc_trace(mVcdFile, threshold_out_din, "(port)threshold_out_din");
    sc_trace(mVcdFile, threshold_out_full_n, "(port)threshold_out_full_n");
    sc_trace(mVcdFile, threshold_out_write, "(port)threshold_out_write");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, data0_blk_n, "data0_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, size_out_blk_n, "size_out_blk_n");
    sc_trace(mVcdFile, threshold_out_blk_n, "threshold_out_blk_n");
    sc_trace(mVcdFile, data0_read_reg_173, "data0_read_reg_173");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, data0_read_1_reg_178, "data0_read_1_reg_178");
    sc_trace(mVcdFile, data0_read_2_reg_183, "data0_read_2_reg_183");
    sc_trace(mVcdFile, data0_read_3_reg_188, "data0_read_3_reg_188");
    sc_trace(mVcdFile, data0_read_4_reg_193, "data0_read_4_reg_193");
    sc_trace(mVcdFile, data0_read_5_reg_198, "data0_read_5_reg_198");
    sc_trace(mVcdFile, data0_read_6_reg_203, "data0_read_6_reg_203");
    sc_trace(mVcdFile, data0_read_7_reg_208, "data0_read_7_reg_208");
    sc_trace(mVcdFile, data0_read_8_reg_213, "data0_read_8_reg_213");
    sc_trace(mVcdFile, data0_read_9_reg_218, "data0_read_9_reg_218");
    sc_trace(mVcdFile, data0_read_10_reg_223, "data0_read_10_reg_223");
    sc_trace(mVcdFile, data0_read_11_reg_228, "data0_read_11_reg_228");
    sc_trace(mVcdFile, data0_read_12_reg_233, "data0_read_12_reg_233");
    sc_trace(mVcdFile, data0_read_13_reg_238, "data0_read_13_reg_238");
    sc_trace(mVcdFile, data0_read_14_reg_243, "data0_read_14_reg_243");
    sc_trace(mVcdFile, ap_block_state16, "ap_block_state16");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_return_4_preg, "ap_return_4_preg");
    sc_trace(mVcdFile, ap_return_5_preg, "ap_return_5_preg");
    sc_trace(mVcdFile, ap_return_6_preg, "ap_return_6_preg");
    sc_trace(mVcdFile, ap_return_7_preg, "ap_return_7_preg");
    sc_trace(mVcdFile, ap_return_8_preg, "ap_return_8_preg");
    sc_trace(mVcdFile, ap_return_9_preg, "ap_return_9_preg");
    sc_trace(mVcdFile, ap_return_10_preg, "ap_return_10_preg");
    sc_trace(mVcdFile, ap_return_11_preg, "ap_return_11_preg");
    sc_trace(mVcdFile, ap_return_12_preg, "ap_return_12_preg");
    sc_trace(mVcdFile, ap_return_13_preg, "ap_return_13_preg");
    sc_trace(mVcdFile, ap_return_14_preg, "ap_return_14_preg");
    sc_trace(mVcdFile, ap_return_15_preg, "ap_return_15_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

a0_Block_codeRepl49_pro::~a0_Block_codeRepl49_pro() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void a0_Block_codeRepl49_pro::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_0_preg = data0_read_reg_173.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_10_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_10_preg = data0_read_10_reg_223.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_11_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_11_preg = data0_read_11_reg_228.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_12_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_12_preg = data0_read_12_reg_233.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_13_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_13_preg = data0_read_13_reg_238.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_14_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_14_preg = data0_read_14_reg_243.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_15_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_15_preg = data0_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_1_preg = data0_read_1_reg_178.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_2_preg = data0_read_2_reg_183.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_3_preg = data0_read_3_reg_188.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_4_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_4_preg = data0_read_4_reg_193.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_5_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_5_preg = data0_read_5_reg_198.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_6_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_6_preg = data0_read_6_reg_203.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_7_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_7_preg = data0_read_7_reg_208.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_8_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_8_preg = data0_read_8_reg_213.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_9_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
            ap_return_9_preg = data0_read_9_reg_218.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_10_reg_223 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_11_reg_228 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_12_reg_233 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_13_reg_238 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_14_reg_243 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_1_reg_178 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_2_reg_183 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_3_reg_188 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_4_reg_193 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_5_reg_198 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_6_reg_203 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_7_reg_208 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_8_reg_213 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
        data0_read_9_reg_218 = data0_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read())))) {
        data0_read_reg_173 = data0_dout.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void a0_Block_codeRepl49_pro::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void a0_Block_codeRepl49_pro::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()));
}

void a0_Block_codeRepl49_pro::thread_ap_block_state16() {
    ap_block_state16 = (esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read()));
}

void a0_Block_codeRepl49_pro::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a0_Block_codeRepl49_pro::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_0 = data0_read_reg_173.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_1 = data0_read_1_reg_178.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_10() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_10 = data0_read_10_reg_223.read();
    } else {
        ap_return_10 = ap_return_10_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_11() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_11 = data0_read_11_reg_228.read();
    } else {
        ap_return_11 = ap_return_11_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_12() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_12 = data0_read_12_reg_233.read();
    } else {
        ap_return_12 = ap_return_12_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_13() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_13 = data0_read_13_reg_238.read();
    } else {
        ap_return_13 = ap_return_13_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_14() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_14 = data0_read_14_reg_243.read();
    } else {
        ap_return_14 = ap_return_14_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_15() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_15 = data0_dout.read();
    } else {
        ap_return_15 = ap_return_15_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_2 = data0_read_2_reg_183.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_3 = data0_read_3_reg_188.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_4 = data0_read_4_reg_193.read();
    } else {
        ap_return_4 = ap_return_4_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_5() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_5 = data0_read_5_reg_198.read();
    } else {
        ap_return_5 = ap_return_5_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_6 = data0_read_6_reg_203.read();
    } else {
        ap_return_6 = ap_return_6_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_7() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_7 = data0_read_7_reg_208.read();
    } else {
        ap_return_7 = ap_return_7_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_8 = data0_read_8_reg_213.read();
    } else {
        ap_return_8 = ap_return_8_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_ap_return_9() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        ap_return_9 = data0_read_9_reg_218.read();
    } else {
        ap_return_9 = ap_return_9_preg.read();
    }
}

void a0_Block_codeRepl49_pro::thread_data0_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        data0_blk_n = data0_empty_n.read();
    } else {
        data0_blk_n = ap_const_logic_1;
    }
}

void a0_Block_codeRepl49_pro::thread_data0_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read()))))) {
        data0_read = ap_const_logic_1;
    } else {
        data0_read = ap_const_logic_0;
    }
}

void a0_Block_codeRepl49_pro::thread_size_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        size_out_blk_n = size_out_full_n.read();
    } else {
        size_out_blk_n = ap_const_logic_1;
    }
}

void a0_Block_codeRepl49_pro::thread_size_out_din() {
    size_out_din = size.read();
}

void a0_Block_codeRepl49_pro::thread_size_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        size_out_write = ap_const_logic_1;
    } else {
        size_out_write = ap_const_logic_0;
    }
}

void a0_Block_codeRepl49_pro::thread_threshold_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        threshold_out_blk_n = threshold_out_full_n.read();
    } else {
        threshold_out_blk_n = ap_const_logic_1;
    }
}

void a0_Block_codeRepl49_pro::thread_threshold_out_din() {
    threshold_out_din = threshold.read();
}

void a0_Block_codeRepl49_pro::thread_threshold_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
        threshold_out_write = ap_const_logic_1;
    } else {
        threshold_out_write = ap_const_logic_0;
    }
}

void a0_Block_codeRepl49_pro::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(data0_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data0_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, size_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, threshold_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXX";
            break;
    }
}

}

