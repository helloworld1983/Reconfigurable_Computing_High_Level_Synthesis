// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_Block_codeRepl49_pro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data0_dout,
        data0_empty_n,
        data0_read,
        size,
        threshold,
        size_out_din,
        size_out_full_n,
        size_out_write,
        threshold_out_din,
        threshold_out_full_n,
        threshold_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] data0_dout;
input   data0_empty_n;
output   data0_read;
input  [31:0] size;
input  [31:0] threshold;
output  [31:0] size_out_din;
input   size_out_full_n;
output   size_out_write;
output  [31:0] threshold_out_din;
input   threshold_out_full_n;
output   threshold_out_write;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;
output  [31:0] ap_return_11;
output  [31:0] ap_return_12;
output  [31:0] ap_return_13;
output  [31:0] ap_return_14;
output  [31:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data0_read;
reg size_out_write;
reg threshold_out_write;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;
reg[31:0] ap_return_6;
reg[31:0] ap_return_7;
reg[31:0] ap_return_8;
reg[31:0] ap_return_9;
reg[31:0] ap_return_10;
reg[31:0] ap_return_11;
reg[31:0] ap_return_12;
reg[31:0] ap_return_13;
reg[31:0] ap_return_14;
reg[31:0] ap_return_15;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data0_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    size_out_blk_n;
reg    threshold_out_blk_n;
reg   [31:0] data0_read_reg_173;
reg    ap_block_state1;
reg   [31:0] data0_read_1_reg_178;
reg   [31:0] data0_read_2_reg_183;
reg   [31:0] data0_read_3_reg_188;
reg   [31:0] data0_read_4_reg_193;
reg   [31:0] data0_read_5_reg_198;
reg   [31:0] data0_read_6_reg_203;
reg   [31:0] data0_read_7_reg_208;
reg   [31:0] data0_read_8_reg_213;
reg   [31:0] data0_read_9_reg_218;
reg   [31:0] data0_read_10_reg_223;
reg   [31:0] data0_read_11_reg_228;
reg   [31:0] data0_read_12_reg_233;
reg   [31:0] data0_read_13_reg_238;
reg   [31:0] data0_read_14_reg_243;
reg    ap_block_state16;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [31:0] ap_return_6_preg;
reg   [31:0] ap_return_7_preg;
reg   [31:0] ap_return_8_preg;
reg   [31:0] ap_return_9_preg;
reg   [31:0] ap_return_10_preg;
reg   [31:0] ap_return_11_preg;
reg   [31:0] ap_return_12_preg;
reg   [31:0] ap_return_13_preg;
reg   [31:0] ap_return_14_preg;
reg   [31:0] ap_return_15_preg;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
#0 ap_return_6_preg = 32'd0;
#0 ap_return_7_preg = 32'd0;
#0 ap_return_8_preg = 32'd0;
#0 ap_return_9_preg = 32'd0;
#0 ap_return_10_preg = 32'd0;
#0 ap_return_11_preg = 32'd0;
#0 ap_return_12_preg = 32'd0;
#0 ap_return_13_preg = 32'd0;
#0 ap_return_14_preg = 32'd0;
#0 ap_return_15_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_0_preg <= data0_read_reg_173;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_10_preg <= data0_read_10_reg_223;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_11_preg <= data0_read_11_reg_228;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_12_preg <= data0_read_12_reg_233;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_13_preg <= data0_read_13_reg_238;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_14_preg <= data0_read_14_reg_243;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_15_preg <= data0_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_1_preg <= data0_read_1_reg_178;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_2_preg <= data0_read_2_reg_183;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_3_preg <= data0_read_3_reg_188;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_4_preg <= data0_read_4_reg_193;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_5_preg <= data0_read_5_reg_198;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_6_preg <= data0_read_6_reg_203;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_7_preg <= data0_read_7_reg_208;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_8_preg <= data0_read_8_reg_213;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 32'd0;
    end else begin
        if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_return_9_preg <= data0_read_9_reg_218;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        data0_read_10_reg_223 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        data0_read_11_reg_228 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        data0_read_12_reg_233 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        data0_read_13_reg_238 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        data0_read_14_reg_243 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        data0_read_1_reg_178 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data0_read_2_reg_183 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        data0_read_3_reg_188 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        data0_read_4_reg_193 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        data0_read_5_reg_198 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        data0_read_6_reg_203 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        data0_read_7_reg_208 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        data0_read_8_reg_213 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        data0_read_9_reg_218 <= data0_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data0_read_reg_173 <= data0_dout;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_0 = data0_read_reg_173;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_1 = data0_read_1_reg_178;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_10 = data0_read_10_reg_223;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_11 = data0_read_11_reg_228;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_12 = data0_read_12_reg_233;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_13 = data0_read_13_reg_238;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_14 = data0_read_14_reg_243;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_15 = data0_dout;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_2 = data0_read_2_reg_183;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_3 = data0_read_3_reg_188;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_4 = data0_read_4_reg_193;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_5 = data0_read_5_reg_198;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_6 = data0_read_6_reg_203;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_7 = data0_read_7_reg_208;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_8 = data0_read_8_reg_213;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_return_9 = data0_read_9_reg_218;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        data0_blk_n = data0_empty_n;
    end else begin
        data0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((data0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | (~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        data0_read = 1'b1;
    end else begin
        data0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        size_out_blk_n = size_out_full_n;
    end else begin
        size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        size_out_write = 1'b1;
    end else begin
        size_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        threshold_out_blk_n = threshold_out_full_n;
    end else begin
        threshold_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        threshold_out_write = 1'b1;
    end else begin
        threshold_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((data0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((data0_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((data0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state16 = ((threshold_out_full_n == 1'b0) | (size_out_full_n == 1'b0) | (data0_empty_n == 1'b0));
end

assign size_out_din = size;

assign threshold_out_din = threshold;

endmodule //a0_Block_codeRepl49_pro
